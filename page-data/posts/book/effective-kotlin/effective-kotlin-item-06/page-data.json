{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-06","result":{"data":{"markdownRemark":{"id":"ac45c0e1-7694-5ba3-bb1c-db7dd7c64ccb","html":"<p>require, check, assert 등을 사용하면 대부분 코틀린 오류를 처리할 수 있지만\n이외의 예측하지 못한 상황을 나타내야 하는 경우가 존재한다.</p>\n<p>JSON 형식을 파싱하는 라이브러리 구현 시 JSON 파일 형식에 문제가 있다면 <code class=\"language-text\">JSONParsingException</code>을 발생시키는 것이 좋다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">inline fun &lt;reified T&gt; String.readObject(): T {\n    //...\n    if (incorrectSign) {\n        throw JsonParsingException()\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>위에서는 표준 라이브러리에 이를 나타내는 적절한 오류가 없어서 사용자 정의 오류를 사용했다.</p>\n<p>하지만 가급적 직접 정의하기 보다는 최대한 표준 라이브러리에 존재하는 오류를 사용하는 것이 좋다.</p>\n<p>표준 라이브러리의 예외는 많은 개발자가 알고 있으므로 널리 알려진 요소를 재사용하면 다른 사람들이 API를 더 쉽게 배우고 이해할 수 있다.</p>\n<ul>\n<li><strong>IllegalArgumentException, IllegalStateException</strong></li>\n<li>\n<p><strong>IndexOutOfBoundsException</strong></p>\n<p>컬렉션 또는 배열에서 인덱스 파라미터 값이 범위를 벗어난 경우</p>\n</li>\n<li>\n<p><strong>ConcurrentModificationException</strong></p>\n<p>동시 수정을 금지하는데 발생한 경우</p>\n</li>\n<li>\n<p><strong>UnsupportedOperationException</strong></p>\n<p>사용하려던 메소드는 현재 객체에서 사용할 수 없다는 것을 나타냄</p>\n<blockquote>\n<p>기본적으로 사용할 수 없는 메소드는 클래스에 없는 것이 좋다.</p>\n<p>사용할 수 없는 메소드를 일부러 두는 경우도 있음 → listOf로 만든 컬렉션은 Immutable임을 알려주기 위한 목적으로 add를 호출 시 무조건 오류가 발생한다.</p>\n</blockquote>\n</li>\n<li>\n<p><strong>NoSuchElementException</strong></p>\n<p>사용자가 사용하려던 요소가 존재하지 않음을 나타냄</p>\n</li>\n</ul>\n<p>책 내용에서 가급적 표준 오류를 다루라고 했지만 아래와 같은 사례도 존재하므로 무조건적으로 표준 오류를 사용하기 보다는 팀 구성원들의 의견을 종합해 처리하는게 좋을 것 같습니다.</p>\n<ul>\n<li>컨트롤러 레이어에서 JPA의 <code class=\"language-text\">Dataintegrityviolationexception</code> 과 같은 저수준 예외를 활용하는 경우</li>\n<li>require나 check에서 발생시키는 예외가 이미 구현된 예외 처리 구문과 겹쳐 예외를 구분해야 하거나 하는 경우</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-06/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-06","tagSlugs":null},"frontmatter":{"date":"2022-02-08T01:30:00.000Z","description":"Effective Kotlin Item 06. 사용자 정의 오류보다는 표준 오류를 사용하라","tags":null,"title":"이펙티브 코틀린 아이템 06. 사용자 정의 오류보다는 표준 오류를 사용하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-06"}},"staticQueryHashes":["2067870509","251939775","401334301"]}