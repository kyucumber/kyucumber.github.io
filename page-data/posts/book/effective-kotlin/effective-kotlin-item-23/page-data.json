{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-23","result":{"data":{"markdownRemark":{"id":"e712bec6-06c4-576c-9f57-7745da7fff27","html":"<p>프로퍼티와 파라미터가 같은 이름을 가지는 경우 지역 파라미터가 외부 스코프에 있는 프로퍼티를 가리며 이를 섀도잉(shadowing)이라고 부른다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class Forest(val name: String) {\n    fun addTree(name: String) {\n        // ...\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>이러한 섀도잉 현상은 클래스 타입 파라미터와 함수 타입 파라미터 사이에서도 발생한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">interface Tree\nclass Birch: Tree\nclass Spruce: Tree\n\n// Type parameter &quot;T&quot; is never used\nclass Forest&lt;T: Tree&gt; {\n    // Forest와 addTree의 타입 파라미터가 독립적으로 동작하는 문제\n    fun &lt;T: Tree&gt; addTree(tree: T) {\n        // ..\n    }\n}\n\nval forest = Forest&lt;Birch&gt;()\n\nforest.addTree(Birch())\nforest.addTree(Spruce())</code>\n        </deckgo-highlight-code>\n<p>위에 주석에도 적었지만, Forest 클래스의 타입 파라미터와 addTree 함수의 타입 파라미터가 독립적으로 동작하게 되어 addTree 메소드에 의도하지 않은 타입이 전달될 수 있다.</p>\n<p>독립적인 타입 파라미터를 의도했다면 이름을 아예 다르게 하는것이 좋다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class Forest&lt;T: Tree&gt; {\n    fun &lt;ST: Tree&gt; addTree(tree: ST) {\n        // ..\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>타입 파라미터 섀도잉을 피하자.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-23/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-23/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-23","tagSlugs":null},"frontmatter":{"date":"2022-02-27T00:04:00.000Z","description":"Effective Kotlin Item23. 타입 파라미터의 섀도잉을 피하라","tags":null,"title":"이펙티브 코틀린 아이템 23. 타입 파라미터의 섀도잉을 피하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-23"}},"staticQueryHashes":["2067870509","251939775","401334301"]}