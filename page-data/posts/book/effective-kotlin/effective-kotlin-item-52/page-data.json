{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-52","result":{"data":{"markdownRemark":{"id":"92215261-b92f-533d-8219-f0cff306b987","html":"<p>immutable 컬렉션보다 mutable 컬렉션이 성능적인 측면에서 더 빠르다.</p>\n<p>immutable 컬렉션에 요소를 추가하려면 새로운 컬렉션을 만들면서 여기에 요소를 추가해야 한다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">operator fun &lt;T&gt; Iterable&lt;T&gt;.plus(element: T): List&lt;T&gt; {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList&lt;T&gt;()\n    result.addAll(this)\n    result.add(element)\n    return result\n}</code>\n        </deckgo-highlight-code>\n<p>이처럼 컬렉션을 복제하는 처리는 비용이 굉장히 많이 든다. 따라서 복제 처리가 필요없는 mutable 컬렉션이 성능적 관점에서 좋다.</p>\n<p>다만 안정성 측면에서 immutable이 좋은데, 일반적인 지역 변수는 동기화나 캡슐화 관점에서 문제가 될 수 있는 경우에 해당되지 않는다. 따라서 <strong>지역 변수로 활용할 때는 mutable 컬렉션을 사용하는 것이 더 합리적</strong>이다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>가변 컬렉션은 일반적으로 추가 처리가 빠르다.</p>\n<p>immutable 컬렉션은 컬렉션 변경 관련 처리를 세부적으로 조정할 수 있다. 하지만 지역 스코프에서는 세부적인 조정이 필요하지 않으므로 가변 컬렉션을 사용하는 것이 좋다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-52/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-52/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-52","tagSlugs":null},"frontmatter":{"date":"2022-04-01T00:25:00.000Z","description":"Effective Kotlin Item 52. mutable 컬렉션 사용을 고려하라","tags":null,"title":"이펙티브 코틀린 아이템 52. mutable 컬렉션 사용을 고려하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-52"}},"staticQueryHashes":["2067870509","251939775","401334301"]}