{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-44","result":{"data":{"markdownRemark":{"id":"397ed12c-b15c-5892-9aef-4735f1f9f007","html":"<p>어떤 클래스에 대한 확장 함수를 정의할 때 이를 멤버로 추가하는 것은 좋지 않다.</p>\n<p>확장 함수는 아래와 같이 첫번째 아규먼트를 리시버로 받는 단순한 일반 함수로 컴파일된다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">fun String.isPhoneNumber(): Boolean = \n    length == 7 &amp;&amp; all { it.isDigit() }\n\n// 컴파일 되면 아래와 같이 변한다.\nfun isPhoneNumber(&#39;$this&#39;: String): Boolean = \n    &#39;$this&#39;.length == 7 &amp;&amp; &#39;$this&#39;.all { it.isDigit() }</code>\n        </deckgo-highlight-code>\n<p>이렇게 단순하게 변환되는 것이므로, 확장 함수를 클래스 멤버로 정의하거나 인터페이스 내부에 정의할 수도 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">interface PhoneBook {\n    fun String.isPhoneNumber(): Boolean\n}\n\nclass Fizz: PhoneBook {\n    override fun String.isPhoneNumber(): Boolean =\n        length == 7 &amp;&amp; all { it.isDigit() }\n}</code>\n        </deckgo-highlight-code>\n<p>이런 코드가 가능하지만, DSL을 만들때를 제외하면 사용하지 않는 것이 좋다.\n특히 가시성 제한을 위해 확장 함수를 멤버로 정의하는 것은 굉장히 좋지 않다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class PhoneBookIncorrect {\n    // ...\n    fun String.isPhoneNumber() =\n        length == 7 &amp;&amp; all { it.isDigit() }\n}</code>\n        </deckgo-highlight-code>\n<p>사용하지 말아야 하는 큰 한가지 이유는 가시성을 제한하지 못한다는 것이다.\n이러한 확장 함수를 사용하려면 아래와 같이 이상한 형태가 된다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">PhoneBookIncorrect().apply { &quot;12345&quot;.isPhoneNumber() }</code>\n        </deckgo-highlight-code>\n<p>확장 함수의 가시성을 제한하고 싶다면 멤버로 만들지 않고, 가시성 한정자를 붙여주면 된다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class PhoneBookIncorrect {\n    // ...\n}\n\nprivate fun String.isPhoneNumber() =\n    length == 7 &amp;&amp; all { it.isDigit() }\n\nfun main() {\n    &quot;12345&quot;.isPhoneNumber()\n}</code>\n        </deckgo-highlight-code>\n<p>멤버 확장 함수를 피해야 하는 이유를 정리하면 아래와 같다.</p>\n<ul>\n<li>\n<p>레퍼런스를 지원하지 않는다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class PhoneBookIncorrect {\n    // ...\n    fun String.isPhoneNumber() =\n        length == 7 &amp;&amp; all { it.isDigit() }\n}\n\nval refX = PhonebookIncorrect::isPhoneNumber // 오류</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>암묵적 접근을 할 때, 두 리시버 중 어떤 리시버가 선택될지 혼동된다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class A {\n    val a = 10\n}\n\nclass B {\n    val a = 20\n    val b = 30\n    \n    fun A.test() = a + b // 결과는 40일까? 50일까\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>확장 함수가 외부에 있는 다른 클래스를 리시버로 받을 때, 해당 함수가 어떤 동작을 하는지 명확하지 않다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class A { /** **/ }\nclass B {\n    // ..\n\n    fun A.update() = ... // A, B 중 어떤 것을 업데이트할까?\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>경험이 적은 개발자의 경우 확장 함수를 보면, 직관적이지 않거나, 심지어 보기만 해도 겁먹을 수 있다.</li>\n</ul>\n<p>멤버 확장 함수를 사용하는 것에 대한 단점을 인지하고 사용하지 않는 것이 좋다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-44/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-44","tagSlugs":null},"frontmatter":{"date":"2022-03-26T00:05:00.000Z","description":"Effective Kotlin Item 44. 멤버 확장 함수의 사용을 피하라","tags":null,"title":"이펙티브 코틀린 아이템 44. 멤버 확장 함수의 사용을 피하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-44"}},"staticQueryHashes":["2067870509","251939775","401334301"]}