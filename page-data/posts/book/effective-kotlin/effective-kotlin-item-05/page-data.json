{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-05","result":{"data":{"markdownRemark":{"id":"befb6108-cda5-5f88-a82d-fadf66fcc4f1","html":"<p>확실하게 어떤 형태로 동작해야 하는 코드가 있다면, 예외를 활용해 제한을 걸어주는 것이 좋다.</p>\n<p>코틀린에서는 코드의 동작에 제한을 걸때 다음과 같은 방법을 사용할 수 있다.</p>\n<ul>\n<li>require</li>\n<li>check</li>\n<li>assert(테스트 에서만 작동)</li>\n<li>return 또는 throw와 함께 사용하는 Evlis operator</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun pop(num: Int = 1): List&lt;T&gt; {\n    require(num &lt;= size) {\n        &quot;Cannot remove more elements than current size&quot;\n    }\n    // 생략\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같이 제한을 걸어주면 아래와 같은 장점이 존재한다.</p>\n<ul>\n<li>제한을 걸면 문서를 읽지 않은 개발자도 문제를 확인할 수 있다.</li>\n<li>문제가 있을 경우 함수가 예상하지 못한 동작을 하지 않고 예외를 throw 한다. throw를 하지 않고 예상하지 못한 동작을 하는 것은 예외를 throw 하는 것 보다 위험하며, 상태를 관리하기 어렵다.</li>\n<li>코드가 어느정도 자체적으로 검사되어 위와 관련된 테스트를 줄일 수 있다.</li>\n<li>스마트 캐스트를 활용할 수 있게 되어, 캐스트를 적게 할 수 있다.</li>\n</ul>\n<h2 id=\"아규먼트\" style=\"position:relative;\"><a href=\"#%EC%95%84%EA%B7%9C%EB%A8%BC%ED%8A%B8\" aria-label=\"아규먼트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아규먼트</h2>\n<p>함수를 정의할 때 타입 시스템을 활용해 아래와 같이 argument에 제한을 거는 코드를 많이 사용한다.</p>\n<ul>\n<li>숫자를 아규먼트로 받아 팩토리얼을 계산한다면 숫자는 양의 정수여야 한다.</li>\n<li>좌표들을 아규먼트로 받아서 클러스터를 찾을 때는 비어있지 않은 좌표 목록이 필요하다.</li>\n<li>사용자로부터 이메일 주소를 받을 때 값이 입력되어 있는지, 형식이 올바른지 체크해야 한다.</li>\n</ul>\n<p>일반적으로 이러한 제한을 걸 때 require 함수를 사용한다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun factorial(n: Int): Long {\n    require(n &gt;= 0)\n    //\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"상태\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C\" aria-label=\"상태 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태</h2>\n<p>아래와 같은 경우, 어떤 구체적인 조건을 만족할 때만 함수를 사용할 수 있게 해야 한다.</p>\n<ul>\n<li>어떤 객체가 미리 초기화되어 있어야만 처리를 하게 하고 싶은 함수</li>\n<li>사용자가 로그인했을 때만 처리를 하게 하고 싶은 함수</li>\n<li>객체를 사용할 수 있는 시점에 사용하고 싶은 함수</li>\n</ul>\n<p>위와 같이 상태와 관련된제한을 할 때는 일반적으로 check를 사용한다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun speak(text: String) {\n    check(isInitialized)\n    // ..\n}</code>\n        </deckgo-highlight-code>\n<p>이러한 확인은 사용자가 규약을 어기고 사용하면 안되는 곳에서 함수를 호출하고 있다고 의심될 때 한다.</p>\n<p>사용자가 코드를 제대로 사용할거라고 믿기 보다는 문제 상황을 예측하고, 문제 상황에 예외를 throw 하는 것이 좋다.</p>\n<h2 id=\"assert--계열-함수-사용\" style=\"position:relative;\"><a href=\"#assert--%EA%B3%84%EC%97%B4-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9\" aria-label=\"assert  계열 함수 사용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assert  계열 함수 사용</h2>\n<p>단위 테스트에서의 Assert 계열 함수 사용에 대해 다룬다.</p>\n<p>자세한 내용은 생략</p>\n<h2 id=\"nullability와-스마트-캐스팅\" style=\"position:relative;\"><a href=\"#nullability%EC%99%80-%EC%8A%A4%EB%A7%88%ED%8A%B8-%EC%BA%90%EC%8A%A4%ED%8C%85\" aria-label=\"nullability와 스마트 캐스팅 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nullability와 스마트 캐스팅</h2>\n<p>코틀린에서 require와 check로 조건을 확인해 true가 나오면 해당 조건은 이후로도 true일 거라고 가정한다.</p>\n<p>따라서 이를 활용해 타입 비교를 한다면 스마트 캐스트가 작동한다.</p>\n<ul>\n<li>Smart cast</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun changeDress(person: Person) {\n    require(person.outfit is Dress)\n    val dress: Dress = person.outfit // person.outfit은 스마트 캐스트로 인해 Dress 타입 보장\n    // ..\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>requireNotNull, checkNotNull을 활용한 unpack</li>\n</ul>\n<p>위와 같은 특징은 대상이 null인지 체크하는데 유용하며, 이 경우 requireNotNull, checkNotNull이라는 특수한 함수를 사용해도 좋다.</p>\n<p>둘 다 스마트 캐스트를 지원하므로 변수를 언팩(unpack)하는 용도로 활용할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">class Person(val email: String?)\nfun validateEmail(email: String) { }\n\nfun sendEmail(person: Person, text: String) {\n    val email = requireNotNull(person.email)\n    validateEmail(email)\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Elvis operator 활용</li>\n</ul>\n<p>nullability를 목적으로 오른쪽에 throw 혹은 return을 두고 Elvis operator를 활용하는 경우가 많다.</p>\n<p>이러한 코드는 굉장히 읽기 쉽고, 유연하게 사용할 수 있다.</p>\n<p>첫번째로 오른쪽에 return을 넣으면 오류 없이 단순히 함수를 중지할 수도 있음</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun sendEmail(person: Person, text: String) {\n    val email: String = person.email ?: return\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>return / throw와 run 활용</li>\n</ul>\n<p>프로퍼티에 문제가 있어서 null 일 때 여러 처리가 필요한 경우 return / throw와 run을 조합해 사용할 수 있다.</p>\n<p>이는 함수가 중지된 이유를 로그에 출력해야 할 때 사용할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun sendEmail(person: Person, text: String) {\n    val email: String = person.email ?: run {\n        log(&quot;Email not sent, no email adress&quot;)\n        return\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>이번 절에서 활용한 내용을 기반으로 아래와 같은 이득을 얻을 수 있다.</p>\n<ul>\n<li>제한을 훨씬 더 쉽게 확인할 수 있다.</li>\n<li>애플리케이션을 더 안정적으로 지킬 수 있다.</li>\n<li>코드를 잘못 쓰는 상황을 막을 수 있다.</li>\n<li>스마트 캐스팅을 활용할 수 있다.</li>\n</ul>\n<p>활용한 메커니즘</p>\n<ul>\n<li>require block</li>\n<li>check block</li>\n<li>assert block</li>\n<li>return, throw, elvis operator</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-05/#%EC%95%84%EA%B7%9C%EB%A8%BC%ED%8A%B8\">아규먼트</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-05/#%EC%83%81%ED%83%9C\">상태</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-05/#assert--%EA%B3%84%EC%97%B4-%ED%95%A8%EC%88%98-%EC%82%AC%EC%9A%A9\">Assert  계열 함수 사용</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-05/#nullability%EC%99%80-%EC%8A%A4%EB%A7%88%ED%8A%B8-%EC%BA%90%EC%8A%A4%ED%8C%85\">nullability와 스마트 캐스팅</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-05/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-05/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-05","tagSlugs":null},"frontmatter":{"date":"2022-02-08T01:00:00.000Z","description":"Effective Kotlin Item 05. 예외를 활용해 코드에 제한을 걸어라","tags":null,"title":"이펙티브 코틀린 아이템 05. 예외를 활용해 코드에 제한을 걸어라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-05"}},"staticQueryHashes":["2067870509","251939775","401334301"]}