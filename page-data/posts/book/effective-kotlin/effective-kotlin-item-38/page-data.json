{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-38","result":{"data":{"markdownRemark":{"id":"8b66a5d5-4669-5fb9-83e7-eecf9eccb4ea","html":"<p>대부분 프로그래밍 언어에는 함수 타입이라는 개념이 없다.</p>\n<p>그래서 연산 또는 액션을 전달할 때 메소드가 하나만 있는 인터페이스를 활용하며 이를 <strong>SAM(Single-Abstract Method)</strong>라고 부른다.</p>\n<p>함수가 SAM을 받는다고 하면 이러한 인터페이스를 구현한 객체를 전달받는다는 의미이다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">fun setOnClickListener(listener: OnClick) {\n    // ...\n}\n\nsetOnClickListener(object : OnClick {\n    override fun clicked(view: View) {\n        // ...\n    }\n})</code>\n        </deckgo-highlight-code>\n<p>위와 같은 코드를 함수 타입을 사용하는 코드로 변경하면 더 많은 자유를 얻을 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">fun setOnClickListener(listener: (View) -&gt; Unit) {\n    // ...\n}</code>\n        </deckgo-highlight-code>\n<p>예를 들어 다음과 같은 방법으로 파라미터를 전달할 수 있다.</p>\n<ul>\n<li>\n<p>람다 표현식 또는 익명 함수로 전달</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">setOnClickListener { /*...*/ }\nsetOnClickListener(fun(view) { /*...*/ })</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>함수 레퍼런스 또는 제한된 함수 레퍼런스로 전달</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">setOnClickListener(::println)\nsetOnClickListener(this::showUsers)</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>선언된 함수 타입을 구현한 객체로 전달</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class ClickListener: (View) -&gt; Unit {\n    override fun invoke(view: View) {\n        // ..\n    }\n}\n\nsetOnClickListener(ClickListener())</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<p>SAM의 장점이 아규먼트에 이름이 붙어있다고 말하는 경우도 있지만, type alias를 이용해 함수 타입도 이름을 붙여 사용할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">typealias Onclick = (View) -&gt; Unit</code>\n        </deckgo-highlight-code>\n<p>또 파라미터에 이름을 가질 수 있으며 이는 IDE의 지원을 받을 수 있다는 이점이 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">typealias OnClick = (view: View) -&gt; Unit</code>\n        </deckgo-highlight-code>\n<p>람다 표현식을 사용할 때는 아규먼트 분해(destructure argument)도 사용할 수 있다.</p>\n<p>이것도 SAM보다 함수 타입을 사용하는게 훨씬 더 좋은 이유이다.</p>\n<h2 id=\"언제-sam을-사용해야-할까\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-sam%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"언제 sam을 사용해야 할까 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 SAM을 사용해야 할까?</h2>\n<p>코틀린이 아닌 다른 언어에서 사용할 클래스를 설계하는 경우라면 SAM을 사용하는것이 좋다.</p>\n<p>함수 타입을 다른 언어에서 사용하는 경우 아래와 같은 단점이 있다.</p>\n<ul>\n<li>함수 타입으로 만들어진 클래스는 자바에서 type alias과 IDE의 지원을 제대로 받을 수 없다.</li>\n<li>\n<p>다른 언어(자바 등)에서 코틀린의 함수 타입을 사용하려면 Unit을 명시적으로 리턴하는 함수가 필요하다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">// Kotlin\nclass CalendarView() {\n    var onDateclicked: ((date: Date) -&gt; Unit)? = null\n    var onPageChanged: OnDateClicked? = null\n}\n\n// Java\ninterface OnDateClicked {\n    fun onClick(date: Date)\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같이 정의된 코틀린 클래스를 아래처럼 자바에서 사용하는 경우 Unit을 명시적으로 리턴하는 함수가 필요하다.</p>\n<deckgo-highlight-code language=\"java\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">CalendarView c = new CalendarView();\nc.setOnDateClicked(date -&gt; Unit.INSTANCE);\nc.setOnPageChanged(date -&gt; {});</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<p>자바에서 사용하기 위한 API를 설계한다면 함수 타입보다 SAM을 사용하는 것이 합리적이다. 이외의 경우라면 함수 타입을 사용하는것이 좋다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-38/#%EC%96%B8%EC%A0%9C-sam%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\">언제 SAM을 사용해야 할까?</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-38/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-38","tagSlugs":null},"frontmatter":{"date":"2022-03-12T00:15:00.000Z","description":"Effective Kotlin Item 38. 연산 또는 액션을 전달할 때는 인터페이스 대신 함수 타입을 사용하라","tags":null,"title":"이펙티브 코틀린 아이템 38. 연산 또는 액션을 전달할 때는 인터페이스 대신 함수 타입을 사용하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-38"}},"staticQueryHashes":["2067870509","251939775","401334301"]}