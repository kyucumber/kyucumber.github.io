{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-11","result":{"data":{"markdownRemark":{"id":"40b0ef7b-f81e-53fd-bcf7-6396cd541e80","html":"<p>코틀린은 간결성이 아니라 가독성(readability)를 좋게 하는데 목표를 두고 설게된 프로그래밍 언어이다.</p>\n<p>개발자는 코드를 작성하는것 보다 읽는 데 많은 시간을 소모한다.</p>\n<p>따라서 항상 가독성을 생각하면서 코드를 작성해야 한다.</p>\n<h2 id=\"인식-부하-감소\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8B%9D-%EB%B6%80%ED%95%98-%EA%B0%90%EC%86%8C\" aria-label=\"인식 부하 감소 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인식 부하 감소</h2>\n<p>가독성은 사람에 따라 다르게 느낄 수 있지만 경험과 인식에 대한 과학으로 만들어진 어느정도의 규칙이 존재한다.</p>\n<ul>\n<li>구현 A</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">if (person != null &amp;&amp; person.isAdult) {\n    view.shopwPerson(person)\n} else {\n    view.showError()\n}</code>\n        </deckgo-highlight-code>\n<p>A는 일반적인 관용구(if / else, &#x26;&#x26;, 메소드 호출)을 사용하고 있어 초보자에게는 구현 A가 더 이해하기 쉽다.</p>\n<ul>\n<li>구현 B</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">person?.takeIf { it.isAdult }\n    ?.let(view::showPerson)\n    ?.: view showError()</code>\n        </deckgo-highlight-code>\n<p>B는 더 짧지만 B는 코틀린에 대한 숙련도가 있는 사람이 아니라면 읽고 이해하기 어렵다.</p>\n<p>이외에도 아래와 같은 차이가 있다.</p>\n<ul>\n<li>A는 수정 및 디버깅이 용이하다. if 혹은 else 블록에 작업을 추가하는 경우 B에서는 함수 참조를 사용할 수 있어 코드를 수정해야 한다.</li>\n<li>구현 B에서 showPerson의 리턴 타입에 따라(null인 경우) 의도치 않게 showError를 호출할 수도 있다.</li>\n</ul>\n<p>우리의 뇌는 짧은 코드를 빠르게 읽을 수 있지만 익숙한 코드는 더 빠르게 읽을 수 있다.\n따라서 기본적으로 <strong>인지 부하를 줄이는 방향으로 코드를 작성</strong>하는것이 좋다.</p>\n<h2 id=\"극단적이-되지-않기\" style=\"position:relative;\"><a href=\"#%EA%B7%B9%EB%8B%A8%EC%A0%81%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EA%B8%B0\" aria-label=\"극단적이 되지 않기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>극단적이 되지 않기</h2>\n<p>위의 구현 B에서 let으로 인해 예상치 못한 결과가 나오는 경우를 보고 일부는 let을 절대로 쓰면 안된다고 이해하는 경우가 있다.</p>\n<p>let은 좋은 코드를 만들기 위해 다양하게 활용할 수 있으므로 극단적으로 받아들이면 안된다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">var person: Person? = null\n\nfun printName() {\n    person?.let { print(it.name) }\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같이 가변 프로퍼티를 가진 경우 스마트 캐스팅이 불가능하고 safe call과 let을 활용하면 사람들이 쉽게 인식할 수 있는 코드를 작성할 수 있다.</p>\n<p>이외에도 아래와 같은 경우 let을 많이 사용한다.</p>\n<ul>\n<li>\n<p>연산을 아규먼트 처리 후로 이동시킬 때</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">print(students.filter{ }.joinToString{ })\n-&gt;\nstudents.filter{ }.joinToString{ }.let(::print)</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>데코레이터를 사용해도 객체를 감쌀 때</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">var obj = FileInputStream(&quot;/file.gz&quot;)\n  .let(::BufferedInputStream)\n  .let(::ZipInputStream)\n  .let(::ObjectInputStream)\n  .readObject() as SomeObject</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<p>위의 경우는 디버그하기 어렵고 경험이 적은 코틀린 개발자는 이해하기 어렵다.</p>\n<p>하지만 위의 경우는 <strong>비용을 지불할 만한 가치가 있으며 정당성 없이 복잡성을 추가하는 경우가 아니다</strong>.</p>\n<h2 id=\"컨벤션\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%EB%B2%A4%EC%85%98\" aria-label=\"컨벤션 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨벤션</h2>\n<p>네이밍, 규칙, 관용구 등에 대해 개발자는 항상 토론하며 이를 위해 이해하고 기억해야 하는 규칙이 존재한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val abc = &quot;A&quot; { &quot;B&quot; } and &quot;C&quot;\nprint(abc)\n\noperator fun String.invoke(f: () -&gt; String): String = this + f()\ninfix fun String.and(s: String) = this + s</code>\n        </deckgo-highlight-code>\n<p>위 코드는 이후에 설명하는 수많은 규칙들을 위반한다.</p>\n<ul>\n<li>연산자는 의미에 맞게 사용해야 한다. invoke는 위와 같은 형태로 사용하면 안된다.</li>\n<li>람다를 마지막 아규먼트로 사용한다 라는 컨벤션을 여기에 적용하면 코드가 복잡해진다.</li>\n<li>현재 코드에서 and라는 함수 이름이 실제 함수 내부에서 이루어지는 처리와 맞지 않다.</li>\n<li>문자열을 결합하는 기능은 이미 언어에 내장되어 있어 이미 있는 것들 다시 만들 필요는 없다.</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-11/#%EC%9D%B8%EC%8B%9D-%EB%B6%80%ED%95%98-%EA%B0%90%EC%86%8C\">인식 부하 감소</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-11/#%EA%B7%B9%EB%8B%A8%EC%A0%81%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EA%B8%B0\">극단적이 되지 않기</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-11/#%EC%BB%A8%EB%B2%A4%EC%85%98\">컨벤션</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-11/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-11","tagSlugs":null},"frontmatter":{"date":"2022-02-12T00:00:00.000Z","description":"Effective Kotlin Item 11. 가독성을 목표로 설계하라","tags":null,"title":"이펙티브 코틀린 아이템 11. 가독성을 목표로 설계하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-11"}},"staticQueryHashes":["2067870509","251939775","401334301"]}