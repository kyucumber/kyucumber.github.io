{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-22","result":{"data":{"markdownRemark":{"id":"b9186a95-d674-590f-a5b4-aa098d1db516","html":"<p>아규먼트로 함수에 값을 전달할 수 있는 것 처럼, 타입 아규먼트를 사용해 함수에 타입을 전달할 수 있다.</p>\n<p>타입 아규먼트를 사용하는 함수를 <strong>제네릭 함수</strong>라고 부른다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">inline fun &lt;T&gt; Iterable&lt;T&gt;.filter(\n    predicate: (T) -&gt; Boolean\n): List&lt;T&gt; {\n    // ...\n}</code>\n        </deckgo-highlight-code>\n<p>타입 파라미터는 컴파일러에 타입과 관련된 정보를 제공해 컴파일러가 타입을 조금이라도 더 정확하게 추측할 수 있게 해준다. filter에서 아규먼트가 컬렉션의 요소와 같은 타입이라는 것을 알 수 있으므로 잘못 처리하는것을 막을 수 있다.</p>\n<p>컴파일 과정에서 최종적으로 이러한 타입 정보는 사라지지만, 개발 중에는 타입 정보를 이용해 안전하게 사용할 수 있다.</p>\n<h2 id=\"제네릭-제한\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%9C%ED%95%9C\" aria-label=\"제네릭 제한 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 제한</h2>\n<p>타입 파라미터의 중요한 기능 중 하나는 구체적인 타입의 서브타입만 사용하게 타입을 제한하는 것이다.</p>\n<p>아래에서는 콜론 뒤에 슈퍼타입을 설정해 타입에 제한을 건다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">fun &lt;T: Comparable&lt;T&gt;&gt; Iterable&lt;T&gt;.sorted(): List&lt;T&gt; {\n    // ...\n}\n\nfun &lt;T, C : MutableCollection&lt;in T&gt;&gt; Iterable&lt;T&gt;.toCollection(destination: C): C {\n    // ...\n}\n\nclass ListAdapter&lt;T: ItemAdapter&gt;(/*..*/) { }</code>\n        </deckgo-highlight-code>\n<p>타입에 제한이 걸리므로, 내부에서 해당 타입이 제공하는 메소드를 사용할 수 있다.</p>\n<p>예를 들어 T가 Iterable<Int>의 서브타입인 경우 T 타입을 기본으로 반복 처리가 가능하고, 반복 처리때 사용되는 객체가 Int라는 것을 알 수 있다.</p>\n<p>많이 사용하는 제한 중 Any도 있다. 이는 nullable이 아닌 타입을 나타낸다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">inline fun &lt;T, R : Any&gt; Iterable&lt;T&gt;.mapNotNull(\n    transform: (T) -&gt; R?\n): List&lt;R&gt; {\n    // ..\n}</code>\n        </deckgo-highlight-code>\n<p>아래와 같이 둘 이상의 제한을 걸수도 있다. 둘 이상의 제약을 걸때는 <code class=\"language-text\">where</code> 키워드를 사용한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">fun &lt;T: Animal&gt; pet(animal: T) where T: GoodTempered {\n    // ..\n}\n\nfun &lt;T&gt; pet(animal: T) where T: Animal, T: GoodTempered {\n    // ..\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>타입 파라미터를 이용해 type-saf 제네릭 알고리즘과 제네릭 객체를 구현하기 때문에 코틀린에서 타입 파라미터는 굉장히 중요한 부분이다.</p>\n<p>타입 파라미터는 구체적인 자료형(concrete type)의 서브타입을 제한할 수 있으며 이렇게 하면 특정 자료형이 제공하는 메소드를 안전하게 사용할 수 있다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-22/#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%A0%9C%ED%95%9C\">제네릭 제한</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-22/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-22/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-22","tagSlugs":null},"frontmatter":{"date":"2022-02-27T00:03:00.000Z","description":"Effective Kotlin Item22. 일반적인 알고리즘을 구현할 때 제네릭을 사용하라","tags":null,"title":"이펙티브 코틀린 아이템 22. 일반적인 알고리즘을 구현할 때 제네릭을 사용하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-22"}},"staticQueryHashes":["2067870509","251939775","401334301"]}