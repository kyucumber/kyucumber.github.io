{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-02","result":{"data":{"markdownRemark":{"id":"3311a7c2-9875-5bb1-8076-9afc60affcd4","html":"<p>상태 정의 시 변수와 프로퍼티의 스코프를 최소화 하는 것이 좋다.</p>\n<ul>\n<li>프로퍼티 보다는 지역 변수를 사용한다.</li>\n<li>최대한 좁은 스코프를 갖게 변수를 사용한다. 예를 들어 반복문 내부에서만 사용되면 변수를 반복문 내부에 작성하는것이 좋다.</li>\n</ul>\n<p>변수는 읽기 전용 전용 여부와 상관 없이 if, when, try-catch, elvis operator 등을 활용해 변수를 정의할 때 초기화되는 것이 좋다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">fun updateWeather(degrees: Int) {\n    val (description, color) = when {\n        degrees &lt; 5 -&gt; &quot;cold to Color.BLUE\n        else -&gt; &quot;hot&quot; to Colodr.RED\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>여러 프로퍼티를 한꺼번에 설정해야 하는 경우 위처럼 destructuring declaration을 활용한다.</p>\n<h2 id=\"캡처링\" style=\"position:relative;\"><a href=\"#%EC%BA%A1%EC%B2%98%EB%A7%81\" aria-label=\"캡처링 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캡처링</h2>\n<p>에라토스테네스의 체 구현 시 아래와 같은 코드를 작성할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val primes: Sequence&lt;Int&gt; = sequence {\n    var numbers = generateSequence(2) { it + 1 }\n\n    while (true) {\n        val prime = numbers.first()\n        yield(prime)\n        numbers = numbers.drop(1)\n            .filter { it % prime != 0 }\n    }\n}\n\nprintln(primes.take(10).toList())\n// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</code>\n        </deckgo-highlight-code>\n<p>위 코드를 아래와 같이 최적화하려고 시도하는 경우 문제가 발생한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val primes: Sequence&lt;Int&gt; = sequence {\n    var numbers = generateSequence(2) { it + 1 }\n\n    // while 스코프 바깥에 var로 정의\n    var prime: Int\n    while (true) {\n        prime = numbers.first()\n        yield(prime)\n        numbers = numbers.drop(1)\n            .filter { it % prime != 0 }\n    }\n}\n\nprintln(primes.take(10).toList())\n// [2, 3, 5, 6, 7, 8, 9, 10, 11, 12]</code>\n        </deckgo-highlight-code>\n<p>위와 같은 문제가 발생할 수 있으므로 <strong>가변성을 피하고 스코프 범위를 좁게</strong> 만들어 이런 문제를 간단하게 피해갈 수 있다.</p>\n<p>Sequence를 많이 사용해보지 않아 조금 헷갈렸는데, var를 사용할 때 prime 값이 ObjectRef로 캡처링되면서 지연 필터링이 우리가 의도한 대로 동작하지 않는 것 같습니다.</p>\n<p><a href=\"https://medium.com/@yangweigbh/how-kotlin-lambda-capture-variable-ef90e11e531d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kotlin Lambda Capture Variable</a></p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>변수의 스코프는 좁게 만들어서 활용하자.</li>\n<li>var 보다는 val을 사용하는 것이 좋다.</li>\n<li>람다에서 변수를 캡처한다는 것을 기억하자.</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-02/#%EC%BA%A1%EC%B2%98%EB%A7%81\">캡처링</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-02/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-02/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-02","tagSlugs":null},"frontmatter":{"date":"2022-02-08T00:10:00.000Z","description":"Effective Kotlin Item 02. 변수의 스코프를 최소화하라","tags":null,"title":"이펙티브 코틀린 아이템 02. 변수의 스코프를 최소화하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-02"}},"staticQueryHashes":["2067870509","251939775","401334301"]}