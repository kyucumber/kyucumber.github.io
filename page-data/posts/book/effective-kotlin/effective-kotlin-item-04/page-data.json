{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-04","result":{"data":{"markdownRemark":{"id":"22bee2a4-8ed5-5216-b445-54815d73e8e0","html":"<p>코틀린의 타입 추론(type inference)을 사용할 때 몇가지 위험한 부분들이 존재한다.</p>\n<p>inferred 타입을 사용하면 슈퍼클래스나 인터페이스로 설정되지 않으며, 정확하게 오른쪽에 있는 피연산자에 맞게 설정되는 문제가 존재한다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">open class Animal\nclass Zebra: Animal()\n\nfun main() {\n    var animal = Zebra()\n    animal = Animal() // Type mismatch\n}</code>\n        </deckgo-highlight-code>\n<p>일반적으로는 위와 같은 상황이 문제가 되지 않으며 타입을 명시적으로 지정해 해결할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">open class Animal\nclass Zebra: Animal()\n\nfun main() {\n    // 타입 명시적 지정\n    var animal: Animal = Zebra()\n    animal = Animal()\n}</code>\n        </deckgo-highlight-code>\n<p>하지만 직접 라이브러리 또는 모듈을 조작할 수 없는 경우 이러한 문제를 간단하게 해결할 수 없다.</p>\n<p>inferred 타입을 노출하면 아래와 같이 위험한 일이 발생할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface CarFactory {\n    fun produce(): Car\n}\n\nval DEFAULT_CAR: Car = Fiat126P()</code>\n        </deckgo-highlight-code>\n<p>위 코드를 아래와 같이 Default를 지정해 inferred 타입을 사용하고 리턴 타입을 제거하면 CarFactory 인터페이스에서는 Fiat126P 이외의 자동차를 생산할 수 없게 된다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface CarFactory {\n    fun produce() = DEFAULT_CAR\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>타입을 확실하게 지정해야 하는 경우 명시적으로 타입을 지정해야 한다는 원칙을 가져야 한다.</li>\n<li>안전을 위해 외부 API를 만들때는 반드시 타입을 지정하고 이렇게 지정한 타입을 특별한 이유와 확실한 확인 없이 제거하지 말자</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-04/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-04/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-04","tagSlugs":null},"frontmatter":{"date":"2022-02-08T00:50:00.000Z","description":"Effective Kotlin Item 04. inferred 타입으로 리턴하지 말라","tags":null,"title":"이펙티브 코틀린 아이템 04. inferred 타입으로 리턴하지 말라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-04"}},"staticQueryHashes":["2067870509","251939775","401334301"]}