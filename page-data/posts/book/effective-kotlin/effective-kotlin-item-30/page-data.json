{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-30","result":{"data":{"markdownRemark":{"id":"49602aac-8239-560f-85ae-e2d00cec8446","html":"<p>가시성과 관련된 제한은 한번 정해지면 변경하기 어렵다.</p>\n<p>클래스의 상태를 나타내는 프로퍼티를 외부에서 변경할 수 있다면 클래스는 자신의 상태를 보장할 수 없다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">class CounterSet&lt;T&gt;(\n    private val innerSet: MutableSEt&lt;T&gt; = setOf()\n) : MutableSet&lt;T&gt; by innerSet {\n    \n    var elementsAdded: Int = 0\n        private set\n}</code>\n        </deckgo-highlight-code>\n<p>위처럼 세터만 private으로 만드는 코드를 많이 사용한다.\n코틀린에서는 구체 접근자의 가시성을 제한해 모든 프로퍼티를 캡슐화하는것이 좋다.</p>\n<p>가시성이 제한될수록 클래스의 변경을 쉽게 추적할 수 있으며, 프로퍼티의 상태를 더 쉽게 이해할 수 있다.\n또한 상태 변경은 동시성을 처리할 때 중요하며 이는 병렬 프로그래밍에서 문제가 된다.</p>\n<h2 id=\"가시성-한정자-사용하기\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%8B%9C%EC%84%B1-%ED%95%9C%EC%A0%95%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"가시성 한정자 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가시성 한정자 사용하기</h2>\n<p>클래스 멤버의 경우 아래 4가지 가시성 한정자(visibility modifier)를 사용할 수 있다.</p>\n<ul>\n<li>public(default) 어디에서나 볼 수 있다.</li>\n<li>private 클래스 내부에서만 볼 수 있다.</li>\n<li>protected 클래스와 서브클래스 내부에서만 볼 수 있다.</li>\n<li>internal 모듈 내부에서만 볼 수 있다.</li>\n</ul>\n<p>톱레벨 요소에는 아래 세가지 가시성 한정자를 사용할 수 있다.</p>\n<ul>\n<li>public(default) 어디에서나 볼 수 있다.</li>\n<li>private 같은 파일 내부에서만 볼 수 있다.</li>\n<li>internal 모듈 내부에서만 볼 수 있다.</li>\n</ul>\n<blockquote>\n<p>위에서 모듈은 함께 컴파일되는 코틀린 소스를 의미한다.</p>\n</blockquote>\n<p>API를 상속할 때 오버라이드해서 가시성을 제한할 수는 없다.\n이는 서브클래스가 슈퍼클래스로도 사용될 수 있기 때문이며 이것이 상속보다 컴포지션을 선호하는 대표적인 이유 중 하나이다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>아래 이유로 요소의 가시성은 최대한 제한적인 것이 좋다.</p>\n<ul>\n<li>인터페이스가 작을수록 이를 공부하고 유지하는 것이 쉽다.</li>\n<li>최대한 제한이 되어 있어야 변경하기 쉽다.</li>\n<li>클래스의 상태를 나타내는 프로퍼티가 노출되어 있다면, 클래스가 자신의 상태를 책임질 수 없다.</li>\n<li>가시성이 제한되면 API의 변경을 쉽게 추적할 수 있다.</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-30/#%EA%B0%80%EC%8B%9C%EC%84%B1-%ED%95%9C%EC%A0%95%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">가시성 한정자 사용하기</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-30/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-30/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-30","tagSlugs":null},"frontmatter":{"date":"2022-03-06T00:02:00.000Z","description":"Effective Kotlin Item 30. 요소의 가시성을 최소화하라","tags":null,"title":"이펙티브 코틀린 아이템 30. 요소의 가시성을 최소화하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-30"}},"staticQueryHashes":["2067870509","251939775","401334301"]}