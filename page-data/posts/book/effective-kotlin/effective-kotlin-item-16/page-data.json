{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-16","result":{"data":{"markdownRemark":{"id":"0c7ece2f-14ed-5e8a-ac7c-e72db35b8d24","html":"<p>코틀린의 프로퍼티와 자바의 필드는 비슷해 보이지만 완전히 다른 개념이다.\n코틀린의 프로퍼티는 아래처럼 <strong>사용자 정의 setter, getter</strong>를 가질 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">var name: String? = null\n    get() = field?.toUpperCase()\n    set(value) {\n        if (!value.isNullOrBlank()\n    }</code>\n        </deckgo-highlight-code>\n<p>위 코드의 field라는 식별자는 프로퍼티의 데이터를 저장해두는 backing field에 대한 레퍼런스이다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val fullName: String\n    get() = &quot;$name $username&quot;</code>\n        </deckgo-highlight-code>\n<p>val을 사용해 읽기 전용 프로퍼티를 만들때는 field가 만들어지지 않는다.</p>\n<p>var을 사용해 만든 읽고 쓸수 있는 프로퍼티는 getter, setter를 정의할 수 있다. 이러한 프로퍼티를 <strong>파생 프로퍼티(derived property)</strong>라고 부르며 자주 사용한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">var date: Date\n    get() = Date(mills)\n    set(value) {\n        millis = value.time\n    }</code>\n        </deckgo-highlight-code>\n<p>직렬화 문제 등으로 더이상 해당 타입을 사용할 수 없을 때 위와 같이 사용할 수 있다.</p>\n<p>프로퍼티는 필드가 필요 없고 개념적으로 접근자(val은 getter, var은 getter, setter)를 나타낸다.  따라서 코틀린은 인터페이스에도 프로퍼티를 정의할 수 있다.</p>\n<ul>\n<li>\n<p>인터페이스에 프로퍼티 정의</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">interface Person {\n  val name: String\n}</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>프로퍼티 위임</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val db: Database by lazy { connectToDb() }</code>\n        </deckgo-highlight-code>\n</li>\n<li>\n<p>확장 프로퍼티</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val Context.preferences: SharedPreferences\n  get() = PreferenceManager.getDefaultSharedPreferences(this)</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<p>프로퍼티는 필드가 아니라 접근자를 나타낸다. 프로퍼티를 함수 대신 사용할 수도 있지만 완전히 대체해서 사용하는 것은 좋지 않다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">// BAD\nval Tree&lt;Int&gt;.sum: Int\n    get() = when (this) {\n        is Leaf -&gt; value\n        is Node -&gt; left.sum + right.sum\n    }\n\n// GOOD\nfun Tree&lt;Int&gt;.sum(): Int = when (this) {\n    is Leaf -&gt; value\n    is Node -&gt; left.sum() + right.sum()\n}</code>\n        </deckgo-highlight-code>\n<p>이런 게터에 재귀 형태의 <strong>많은 계산이 들어갈 것이라고 예상하지 않기 때문에 이러한 처리는 프로퍼티가 아닌 함수로 구현</strong>해야 한다.</p>\n<p>원칙적으로 프로퍼티는 상태를 나타내거나 설정하기 위한 목적으로만 사용하는 것이 좋고 다른 로직 등을 포함하지 않아야 한다.</p>\n<blockquote>\n<p><strong>프로퍼티 사용 판단을 위한 간단한 질문</strong></p>\n<p>이 프로퍼티를 함수로 정의할 경우, 접두사로 get 또는 set을 붙일 것인가? 아니라면 프로퍼티로 만드는 것은 좋지 않다.</p>\n</blockquote>\n<h3 id=\"프로퍼티-대신-함수를-사용해야-하는-경우\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%8C%80%EC%8B%A0-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"프로퍼티 대신 함수를 사용해야 하는 경우 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로퍼티 대신 함수를 사용해야 하는 경우</h3>\n<ul>\n<li>연산 비용이 높거나 복잡도가 O(1)보다 큰 경우</li>\n<li>비즈니스 로직을 포함하는 경우: 로깅 리스너 통지, 바인드된 요소 변경 등</li>\n<li>결정적이지 않은 경우: 같은 동작을 연속적으로 두번 했을 때 다른 값이 나올 수 있다면 함수 사용</li>\n<li>변환의 경우: 변환은 관습적으로 Int.toDouble()과 같은 변환 함수로 이루어지기 때문에 이런 변환을 프로퍼티로 만들면 오해를 불러 일으킬 수 있다.</li>\n<li>게터에서 프로퍼티의 상태 변경이 일어나야 하는 경우: 관습적으로 게터에서 프로퍼티의 상태 변화를 일으킨다고 생각하지 않는다.</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-16/#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%8C%80%EC%8B%A0-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">프로퍼티 대신 함수를 사용해야 하는 경우</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-16/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-16","tagSlugs":null},"frontmatter":{"date":"2022-02-16T00:55:00.000Z","description":"Effective Kotlin Item 16. 프로퍼티는 동작이 아니라 상태를 나타내야 한다.","tags":null,"title":"Effective Kotlin Item 16. 프로퍼티는 동작이 아니라 상태를 나타내야 한다.","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-16"}},"staticQueryHashes":["2067870509","251939775","401334301"]}