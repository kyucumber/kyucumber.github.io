{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-34","result":{"data":{"markdownRemark":{"id":"6f4b7c9c-cc70-585f-b63d-6c259ce7f975","html":"<p>객체를 정의하고 생성하는 방법을 지정할때 사용하는 가장 기본적인 방법은 기본 생성자를 사용하는 것이다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class User(var name: String, var surname: String)\n\nval user = User(&quot;Marcin&quot;, &quot;Moskala&quot;)</code>\n        </deckgo-highlight-code>\n<p>기본 생성자가 좋은 방식인 이유를 이해하려면, 생성자와 관련된 아래 자바 패턴들을 이해하는 것이 좋다.</p>\n<ul>\n<li>점층적 생성자 패턴(telescoping constructor pattern)</li>\n<li>빌더 패턴(builder pattern)</li>\n</ul>\n<h2 id=\"점층적-생성자-패턴telescoping-constructor-pattern\" style=\"position:relative;\"><a href=\"#%EC%A0%90%EC%B8%B5%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%8C%A8%ED%84%B4telescoping-constructor-pattern\" aria-label=\"점층적 생성자 패턴telescoping constructor pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>점층적 생성자 패턴(telescoping constructor pattern)</h2>\n<p>여러가지 종류의 생성자를 사용하는 굉장히 간단한 패턴이다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class Pizza {\n    val size: String\n    val cheese: Int\n    val olives: Int\n    val bacon: Int\n\n    constructor(size: String, cheess: Int, olives: Int, bacon: Int) {\n        this.size = size\n        this.cheess = cheess\n        this.olives = olives\n        this.bacon = bacon\n    }\n    constructor(size: String, cheese: Int, olives: Int): this(size, cheese, olives, 0)\n    constructor(size: String, cheese: Int): this(size, cheese, 0)\n    constructor(size: String): this(size, 0)\n}</code>\n        </deckgo-highlight-code>\n<p>코틀린에서는 디폴트 아규먼트(default argument)를 사용할 수 있기 때문에 좋은 코드가 아니다. 일반적으로 아래와 같이 디폴트 아규먼트를 사용한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class Pizza(\n    val size: String,\n    val cheese: Int = 0,\n    val olives: Int = 0,\n    val bacon: Int = 0\n)</code>\n        </deckgo-highlight-code>\n<p>디폴트 아규먼트가 점층적 생성자보다 좋은 이유는 다음과 같다</p>\n<ul>\n<li>파라미터들의 값을 원하는 대로 지정할 수 있다.</li>\n<li>아규먼트를 원하는 순서로 지정할 수 있다.</li>\n<li>명시적으로 이름을 붙여서 아규먼트를 지정하므로 의미가 훨씬 명확하다.</li>\n</ul>\n<h2 id=\"빌더-패턴builder-pattern\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4builder-pattern\" aria-label=\"빌더 패턴builder pattern permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌더 패턴(builder pattern)</h2>\n<p>자바에서는 네임드 파라미터(named parameter)와 디폴트 아규먼트(default argument)를 사용할 수 없다.\n자바에서는 빌더 패턴을 사용한다.</p>\n<p>자바의 빌더 패턴은 아래와 같은 장점을 제공한다.</p>\n<ul>\n<li>파라미터에 이름을 붙일 수 있다.</li>\n<li>파라미터를 원하는 순서대로 지정할 수 있다.</li>\n<li>디폴트 값을 지정할 수 있다.</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class Pizza private constructor(\n    val size: String,\n    val cheese: Int,\n    val olives: Int,\n    val bacon: Int\n) {\n    class Builder(private val size: String) {\n        private var cheese: Int = 0\n        private var olives: Int = 0\n        private var bacon: Int = 0\n        \n        fun setCheese(value: Int): Builder = apply {\n            cheese = value\n        }\n        \n        // ...\n        \n        fun build() = Pizza(size, cheese, olives, bacon)\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>이런 모든 장점들은 코틀린의 디폴트 아규먼트와 네임드 파라미터도 가지고 있다.</p>\n<p>빌더 패턴을 사용하는것 보다 네임드 파라미터를 사용하는게 좋은 이유는 아래와 같다.</p>\n<ul>\n<li>더 짧다</li>\n<li>더 명확하다</li>\n<li>더 사용하기 쉽다</li>\n<li>동시성과 관련된 문제가 없다: 코틀린의 함수 파라미터는 항상 immutable이지만 빌더 패턴의 프로퍼티는 mutable이다</li>\n</ul>\n<p>값의 의미를 묶어서 지정해야 하는 경우나 특정 값을 누적하는 형태로 사용해야 하면 빌더 패턴을 이용하는게 나을 수도 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val router = Router.Builder()\n    .addRoute(path = &quot;/home&quot;, ::showHome)\n    .addRoute(path = &quot;/users&quot;, ::showUsers)\n    .build()</code>\n        </deckgo-highlight-code>\n<p>하지만 코틀린에서는 DSL 빌더를 이용해 아래와 같이 구현할 수 있으므로 가급적이면 DSL을 이용하는것이 좋다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">val route = router {\n    &quot;/home&quot; directsTo ::showHome\n    &quot;/users&quot; directsTo ::showUsers\n}</code>\n        </deckgo-highlight-code>\n<p>빌더 패턴은 다음과 같은 경우에만 사용하는것이 좋다.</p>\n<ul>\n<li>빌더 패턴을 사용하는 다른 언어로 작성된 라이브러리를 그대로 옮길 때</li>\n<li>디폴트 아규먼트와 DSL을 지원하지 않는 다른 언어에서 쉽게 사용할 수 있게 API를 설계할 때</li>\n</ul>\n<p>위 두가지를 제외하면 빌더 패턴 대신에 디폴트 아규먼트를 갖는 기본 생성자 또는 DSL을 사용하는 것이 좋다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>코틀린에서는 점층적 생성자 패턴과 빌더 패턴을 거의 사용하지 않는다.</p>\n<p>디폴트 아규먼트나 기본 생성자, DSL을 활용하자.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-34/#%EC%A0%90%EC%B8%B5%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%8C%A8%ED%84%B4telescoping-constructor-pattern\">점층적 생성자 패턴(telescoping constructor pattern)</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-34/#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4builder-pattern\">빌더 패턴(builder pattern)</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-34/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-34/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-34","tagSlugs":null},"frontmatter":{"date":"2022-03-06T00:10:00.000Z","description":"Effective Kotlin Item 34. 기본 생성자에 있는 이름 있는 옵션 아규먼트를 사용하라","tags":null,"title":"이펙티브 코틀린 아이템 34. 기본 생성자에 있는 이름 있는 옵션 아규먼트를 사용하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-34"}},"staticQueryHashes":["2067870509","251939775","401334301"]}