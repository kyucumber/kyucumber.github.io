{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-31","result":{"data":{"markdownRemark":{"id":"3ebca493-d5dc-5380-a789-5e72d54577af","html":"<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun Context.showMessage(\n    message: String,\n    duration: MessageLength = MessageLength.LONG\n) {\n    val toastDuration = when(duration) {\n        SHORT -&gt; Length.LENGTH_SHORT\n        LONG -&gt; Length.LENGTH_LONG\n    }\n    Toast.makeText(this, message, toastDuration).show()\n}\n\nenum class MessageLength { SHORT, LONG }</code>\n        </deckgo-highlight-code>\n<p>위 showMessage 함수는 다른 타입으로도 메시지를 출력할 수 있게 하고자 붙인 이름이지만 개발자는 당연히 토스트를 출력할거라고 생각할 수 있다.</p>\n<p>따라서 이 함수가 무엇을 하는지 명확하게 설명하고 싶다면 아래처럼 KDoc으로 주석을 붙여 주는 것이 좋다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">/**\n * Universal way for the project to display a short\n * message to a user.\n * @param message 설명\n * @param duration 설명\n */\nfun Context.showMessage(\n    // ...\n)</code>\n        </deckgo-highlight-code>\n<h2 id=\"규약\" style=\"position:relative;\"><a href=\"#%EA%B7%9C%EC%95%BD\" aria-label=\"규약 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>규약</h2>\n<p>규약이 적절하게 정의되어 있다면 클래스를 만든 사람은 클래스가 어떻게 사용될 지 걱정하지 않아도 된다.</p>\n<p>서로가 규약을 존중하면 독립적으로 작업해도 모든것이 정상적으로 기능할 것이다.</p>\n<h2 id=\"규악-정의하기\" style=\"position:relative;\"><a href=\"#%EA%B7%9C%EC%95%85-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\" aria-label=\"규악 정의하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>규악 정의하기</h2>\n<p>규약 정의를 위한 대표적인 몇가지 방법</p>\n<ul>\n<li>이름</li>\n<li>주석과 문서</li>\n<li>타입</li>\n</ul>\n<h2 id=\"주석을-써야-할까\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D%EC%9D%84-%EC%8D%A8%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"주석을 써야 할까 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주석을 써야 할까?</h2>\n<p>대부분의 기능은 이름으로 무엇을 하는지 확실하게 알 수 있으므로 주석을 활용한 추가적인 설명이 필요가 없다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">fun List&lt;Int&gt;.product() = fold(1) { acc, i -&gt; acc * i }</code>\n        </deckgo-highlight-code>\n<p>여기에 주석을 다는 것은 코드를 산만하게 만드는 노이즈이다.</p>\n<h2 id=\"kdoc-형식\" style=\"position:relative;\"><a href=\"#kdoc-%ED%98%95%EC%8B%9D\" aria-label=\"kdoc 형식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KDoc 형식</h2>\n<p>주석으로 함수를 문서화할 때 사용하는 공식적인 형식을 KDoc이라고 부른다.</p>\n<p>KDoc은 <code class=\"language-text\">/**</code> 로 시작해 <code class=\"language-text\">*/</code> 로 끝나며 아래와 같은 구조를 가지고 있다.</p>\n<ul>\n<li>첫번째 부분은 요소에 대한 요약 설명이다.</li>\n<li>두번째 부분은 상세 설명이다.</li>\n<li>이어지는 줄은 모두 태그로 시작하며, 이러한 태그는 추가적인 설명을 위해 사용된다.</li>\n</ul>\n<p>사용될 수 있는 태그는 아래와 같다.</p>\n<ul>\n<li><code class=\"language-text\">@param</code> 함수 파라미터 또는 클래스, 프로퍼티, 함수 타입 파라미터</li>\n<li><code class=\"language-text\">@return</code> 함수의 리턴 값을 문서화</li>\n<li><code class=\"language-text\">@constructor</code> 클래스의 기본 생성자를 문서화</li>\n<li><code class=\"language-text\">@receiver</code> 확장 함수의 리시버를 문서화</li>\n<li><code class=\"language-text\">@property &lt;name></code> 명확한 이름을 가진 클래스의 프로퍼티를 문서화, 기본 생성자에 정의된 프로퍼티에 사용한다.</li>\n<li><code class=\"language-text\">@throws &lt;class>, @exception &lt;class></code> 메소드 내부에서 발생할 수 있는 예외를 문서화</li>\n<li><code class=\"language-text\">@sample &lt;identifier></code> 정규화된 형식 이름을 사용해 함수의 사용 예를 문서화한다.</li>\n<li><code class=\"language-text\">@see &lt;identifier></code> 특정한 클래스 또는 메소드에 대한 링크 추가</li>\n<li><code class=\"language-text\">@author</code> 요소의 작성자 지정</li>\n<li><code class=\"language-text\">@since</code> 요소에 대한 버전 지정</li>\n<li><code class=\"language-text\">@supress</code> 이를 지정하면 만들어지는 문서에서 해당 요소가 제외된다.  외부에서는 사용할 수 있지만, 공식 API에 포함할 필요가 없는 요소에 지정</li>\n</ul>\n<h2 id=\"타입-시스템과-예측\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B3%BC-%EC%98%88%EC%B8%A1\" aria-label=\"타입 시스템과 예측 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 시스템과 예측</h2>\n<p>클래스가 어떤 동작을 할 것이라 예측되면, <strong>서브클래스도 이를 보장해야 하며 이를 리스코프 치환 원칙(Liskov substitution principle)</strong>이라고 부른다.</p>\n<p>표준 라이브러리나 인기있는 라이브러리의 대부분 클래스는 서브클래스에 대한 자세한 설명과 규약을 갖고 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface Car {\n    /**\n     * 자동차의 방향을 변경합니다.\n     * @param angle 바퀴 축의 각도를 지정합니다.\n     * 라디안 단위로 지정하며, 0은 직진을 의미합니다.\n     */\n    fun setWheelPosition(angle: Float)\n\n    /**\n     * 자동차의 속도가 0이 될때까지 감속합니다.\n     * @param pressure 브레이크 페달을 사용하는 비율을 지정합니다.\n     * 0 - 1 사이의 숫자를 지정합니다.\n     */\n    fun setBreakPedal(pressure: Double)\n}</code>\n        </deckgo-highlight-code>\n<p>이러한 설명과 규약은 인터페이스를 유용하게 만든다.</p>\n<h2 id=\"조금씩-달라지는-세부-사항\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B8%88%EC%94%A9-%EB%8B%AC%EB%9D%BC%EC%A7%80%EB%8A%94-%EC%84%B8%EB%B6%80-%EC%82%AC%ED%95%AD\" aria-label=\"조금씩 달라지는 세부 사항 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조금씩 달라지는 세부 사항</h2>\n<p>프로그래밍 언어에서도 구현의 세부 사항은 조금씩 달라질 수 있지만, 최대한 많이 보호하는 것이 좋다.</p>\n<p>캡슐화로 최대한 허용되는 범위를 지정해주면 사용자가 구현에 신경을 많이 쓸 필요가 없어지므로 더 많은 자유를 갖게 된다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>특히 외부 API를 구현할 때는 규약을 잘 정의해야 한다.</p>\n<p>이러한 규약은 이름, 문서, 주석, 타입을 통해 구현할 수 있다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#%EA%B7%9C%EC%95%BD\">규약</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#%EA%B7%9C%EC%95%85-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0\">규악 정의하기</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#%EC%A3%BC%EC%84%9D%EC%9D%84-%EC%8D%A8%EC%95%BC-%ED%95%A0%EA%B9%8C\">주석을 써야 할까?</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#kdoc-%ED%98%95%EC%8B%9D\">KDoc 형식</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#%ED%83%80%EC%9E%85-%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B3%BC-%EC%98%88%EC%B8%A1\">타입 시스템과 예측</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#%EC%A1%B0%EA%B8%88%EC%94%A9-%EB%8B%AC%EB%9D%BC%EC%A7%80%EB%8A%94-%EC%84%B8%EB%B6%80-%EC%82%AC%ED%95%AD\">조금씩 달라지는 세부 사항</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-31/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-31","tagSlugs":null},"frontmatter":{"date":"2022-03-06T00:03:00.000Z","description":"Effective Kotlin Item 31. 문서로 규약을 정의하라","tags":null,"title":"이펙티브 코틀린 아이템 31. 문서로 규약을 정의하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-31"}},"staticQueryHashes":["2067870509","251939775","401334301"]}