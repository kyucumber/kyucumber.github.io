{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-47","result":{"data":{"markdownRemark":{"id":"7ea5ef9b-e05a-57b1-aa23-634e3fc62b1f","html":"<p>하나의 값을 보유하는 객체도 inline으로 만들 수 있다. (Kotlin 1.3 부터)</p>\n<p>기본 생성자 프로퍼티가 하나인 클래스 앞에 inline을 붙이면, 해당 객체를 사용하는 위치가 모두 해당 프로퍼티로 교체된다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">inline class Name(private val value: String) {\n    // ..\n}</code>\n        </deckgo-highlight-code>\n<p>이러한 inline 클래스는 다음과 같이 값을 곧바로 집어 넣는 것도 허용된다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val name: Name = Name(&quot;Marcin&quot;)</code>\n        </deckgo-highlight-code>\n<p>위 코드는 컴파일 시 아래와 같은 형태로 변경된다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val name: String = &quot;Marcin&quot;</code>\n        </deckgo-highlight-code>\n<p>inline 클래스의 메소드는 모두 정적 메소드로 만들어진다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">inline class Name(private val value: String) {\n    fun greet() {\n        print(&quot;Hello, I am $value&quot;)\n    }\n}\n\nval name: Name = Name(&quot;Marcin&quot;)\nname.greet()</code>\n        </deckgo-highlight-code>\n<p>컴파일 시 아래 형태로 바뀐다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val name: String = &quot;Marcin&quot;\nName.&#39;greet-impl&#39;(name)</code>\n        </deckgo-highlight-code>\n<p>inline 클래스는 다른 자료형을 래핑해서 새로운 자료형을 만들 때 많이 사용된다.\n이 때 어떠한 오버헤드도 발생하지 않는다.</p>\n<p>inline 클래스는 아래 상황에 많이 사용된다.</p>\n<ul>\n<li>측정 단위를 표현할 때</li>\n<li>타입 오용으로 발생하는 문제를 막을 때</li>\n</ul>\n<h2 id=\"측정-단위를-표현할-때\" style=\"position:relative;\"><a href=\"#%EC%B8%A1%EC%A0%95-%EB%8B%A8%EC%9C%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%A0-%EB%95%8C\" aria-label=\"측정 단위를 표현할 때 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>측정 단위를 표현할 때</h2>\n<p>특정 시간 이후 파라미터로 받은 callback을 실행하는 타이머 클래스를 만드는 경우</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface Timer {\n    fun callAfter(time: Int, callback: () -&gt; Unit)\n}</code>\n        </deckgo-highlight-code>\n<p>time은 ms, s, min 중 어떤 단위인지 명확하지 않으며 이로 인해 여러 문제가 발생할 수 있다.</p>\n<p>가장 쉬운 방법은 아래처럼 측정 단위를 붙여주는 것이다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface Timer {\n    fun callAfter(timeMillis: Int, callback: () -&gt; Unit)\n}</code>\n        </deckgo-highlight-code>\n<p>하지만 함수를 사용할 때 프로퍼티 이름이 표시되지 않을 수 있어 여전히 실수의 여지는 남아있다.\n그리고 리턴 값의 경우 이름을 붙일 수 없으며 이는 똑같이 큰 문제가 될 수 있는 부분이다.</p>\n<p>더 좋은 해결 방법은 타입 자체에 제한을 거는 것이며 이 때 코드를 효율적으로 만들기 위해서는 다음과 같이 인라인 클래스를 활용할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">inline class Minutes(val minutes: Int) {\n    fun toMillis(): Millis = Millis(minutes * 60 * 1000)\n    // ..\n}\n\ninline class Millis(val milliseconds: Int) {\n    // ..\n}\n\ninterface Timer {\n    fun callAfter(timeMillis: Millis, callback: () -&gt; Unit)\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 하면 올바른 타입을 사용하는 것이 강제된다.</p>\n<p>이러한 단위를 제한할 때 활용하면 좋다. 또한 객체 생성을 위해 DSL-like 확장 프로퍼티를 만들어 두어도 좋다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val Int.min get() = Minutes(this)\nval Int.ms get() = Millis(this)\n\nval timeMin: Minutes = 10.min</code>\n        </deckgo-highlight-code>\n<h2 id=\"타입-오용으로-발생하는-문제를-막을-때\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%98%A4%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EB%A7%89%EC%9D%84-%EB%95%8C\" aria-label=\"타입 오용으로 발생하는 문제를 막을 때 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 오용으로 발생하는 문제를 막을 때</h2>\n<p>SQL 데이터베이스는 일반적으로 ID를 사용해 요소를 식별한다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">@Entity(tableName = &quot;grades&quot;)\nclass Grades(\n    @ColumnInfo(name = &quot;studentId&quot;)\n    val studentId: Int,\n\n    // ..\n)</code>\n        </deckgo-highlight-code>\n<p>이런 코드는 ID가 Int 자료형이라 실수로 잘못된 값을 넣을 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">inline class StudentId(val studentId: Int)\n\n@Entity(tableName = &quot;grades&quot;)\nclass Grades(\n    @ColumnInfo(name = &quot;studentId&quot;)\n    val studentId: StudentId,\n\n    // ..\n)</code>\n        </deckgo-highlight-code>\n<p>이런 경우 ID 사용이 안전해지며 컴파일 시 타입이 Int로 대체되어 코드를 바꾸어도 별도의 문제가 발생하지 않는다.</p>\n<h2 id=\"인라인-클래스와-인터페이스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"인라인 클래스와 인터페이스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인라인 클래스와 인터페이스</h2>\n<p>인라인 클래스도 다른 클래스와 마찬가지로 인터페이스를 구현할 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface TimeUnit {\n    val millis: Long\n}\n\ninline class Minutes(val minutes: Int): TimeUnit {\n    override val millis: Long get() = minutes * 60 * 1000\n    // ..\n}\n\ninline class Millis(val milliseconds: Int): TimeUnit {\n    // ..\n}\n\nfun setUpTimer(time: TimeUnit) {\n    val millis = time.millis\n    // ..\n}\n\nsetUpTimer(Minuites(123))</code>\n        </deckgo-highlight-code>\n<p>하지만 실제 클래스는 inline으로 동작하지 않으며 장점이 하나도 없다. 이는 인터페이스를 통해서 타입을 나타내려면 객체를 래핑해서 사용해야 하기 때문이다.</p>\n<p>따라서 <strong>인터페이스를 구현하는 인라인 클래스는 아무런 의미가 없다.</strong></p>\n<h2 id=\"typealias\" style=\"position:relative;\"><a href=\"#typealias\" aria-label=\"typealias permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typealias</h2>\n<p>typealias를 사용하면 타입에 새로운 이름을 붙여줄 수 있다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">typealias NewName = Int\nval n: NewName = 10</code>\n        </deckgo-highlight-code>\n<p>이는 길고 반복적으로 사용해야 할 때 유용하다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">typealias ClickListener = (view: View, event: Event) -&gt; Unit\n\nclass View {\n    fun addClickListener(listener: ClickListener) {}\n    // ..\n}</code>\n        </deckgo-highlight-code>\n<p>하지만 typealias는 안전하지 않다. 아래에서 Seconds와 Millis 모두 단순하게 Int를 나타내며 실수로 혼용해 잘못 입력하더라도 어떠한 오류도 발생하지 않는다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">typealias Second = Int\ntypealias Millis = Int\n\nfun getTime(): Millis = 10\nfun setUpTimer(time: Seconds) {}\n\nfun main() {\n    val seconds: Seconds = 10\n    val millis: Millis = seconds // 오류가 발생하지 않음\n}</code>\n        </deckgo-highlight-code>\n<p>이는 오히려 문제를 찾는것은 어렵게 만든다. 따라서 <strong>이런 형태로 typealias를 사용하면 안된다</strong>.</p>\n<p>단위 등을 표현하려면 파라미터 이름 또는 클래스를 사용해야 한다.</p>\n<p>인라인 클래스를 사용하면 비용과 안전 측면 모두에서 장점이 있다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>인라인 클래스를 사용하면 성능적인 오버헤드 없이 타입을 래핑할 수 있다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-47/#%EC%B8%A1%EC%A0%95-%EB%8B%A8%EC%9C%84%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%A0-%EB%95%8C\">측정 단위를 표현할 때</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-47/#%ED%83%80%EC%9E%85-%EC%98%A4%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EB%A7%89%EC%9D%84-%EB%95%8C\">타입 오용으로 발생하는 문제를 막을 때</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-47/#%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">인라인 클래스와 인터페이스</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-47/#typealias\">typealias</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-47/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-47/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-47","tagSlugs":null},"frontmatter":{"date":"2022-04-01T00:00:00.000Z","description":"Effective Kotlin Item 47. 인라인 클래스의 사용을 고려하라","tags":null,"title":"이펙티브 코틀린 아이템 47. 인라인 클래스의 사용을 고려하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-47"}},"staticQueryHashes":["2067870509","251939775","401334301"]}