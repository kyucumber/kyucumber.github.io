{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-08","result":{"data":{"markdownRemark":{"id":"3ed42bd2-ce32-5b1b-acbe-816e563923ff","html":"<p>null은 값이 부족하다는 것을 나타낸다.</p>\n<ul>\n<li>\n<p>프로퍼티가 null인 경우</p>\n<p>값이 설정되지 않았거나 제거되었음</p>\n</li>\n<li>\n<p>null을 리턴하는 경우 여러 의미를 가질 수 있음</p>\n<ul>\n<li>String.toIntOrNull()은 String을 Int로 적절히 변환할 수 없을 때 null</li>\n<li>Interable<T>.firstOrNull()은 주어진 조건에 맞는 요소가 없는 경우 null</li>\n</ul>\n</li>\n</ul>\n<p>이러한 null은 nullable 값의 처리를 위해 명확한 의미를 갖는 것이 좋으며 아래와 같은 세가지 방법으로 처리한다.</p>\n<ul>\n<li><strong>safe call(?), smart casting, elvis operator 연산자를 활용해 안전하게 처리한다.</strong></li>\n<li><strong>오류를 throw 한다.</strong></li>\n<li><strong>함수 또는 프로퍼티를 리팩토링해서 nullable 타입이 나오지 않게 바꾼다.</strong></li>\n</ul>\n<h2 id=\"null을-안전하게-처리하기\" style=\"position:relative;\"><a href=\"#null%EC%9D%84-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"null을 안전하게 처리하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null을 안전하게 처리하기</h2>\n<ul>\n<li>\n<p>safe call, smart casting</p>\n<p>널리 사용되는 방법으로는 safe call과 smart casting이 있다.</p>\n</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">printer?.print() // safe call\nif (printer != null) printer.print() // smart casting</code>\n        </deckgo-highlight-code>\n<ul>\n<li>\n<p>elvis operator</p>\n<p>elvis operator 또한 많이 사용되며 elvis operator 오른쪽에는 return, throw를 포함한 모든 표현식이 허용된다.</p>\n<blockquote>\n<p>이는 return, throw 모두 Nothing을 리턴하게 설계되어서 가능하다.</p>\n</blockquote>\n</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">val printerName = printer?.name ?: &quot;Unnamed&quot;\nval printerName = printer?.name ?: return\nval printerName = printer?.name ?: throw Error(&quot;error&quot;)</code>\n        </deckgo-highlight-code>\n<ul>\n<li>smart casting with contracts feature(규약 기능)</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">val name = readLine()\nif (!name.isNullOrBlank()) {\n    println(name.toUpperCase()) // smart casting에 의해 safe call(?) 없이 toUpperCase 호출 가능\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>방어적 프로그래밍과 공격적 프로그래밍</p>\n<ul>\n<li>방어적 프로그래밍(defensive programming)</li>\n</ul>\n<p>모든 가능성을 올바른 방식으로 처리하는 것 (null일때 출력하지 않기 등)</p>\n<ul>\n<li>공격적 프로그래밍(offensive programming)</li>\n</ul>\n<p>예상하지 못한 상황 발생 시 개발자에게 알려서 수정하게 만드는 방식 require, check 등이 공격적 프로그래밍을 위한 도구이다.</p>\n</blockquote>\n<h2 id=\"오류-throw-하기\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-throw-%ED%95%98%EA%B8%B0\" aria-label=\"오류 throw 하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 throw 하기</h2>\n<p>아래와 같은 상황에서 names가 null이면 별도의 행위 없이 코드가 이어서 진행된다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">val names: List&lt;String&gt;? = getNames()\n\nif (!new.isNullOrEmpty()) {\n    names.forEach { println(it) }\n}</code>\n        </deckgo-highlight-code>\n<p>만약 names가 null이 될 것을 예상하지 못한다면 println이 호출되지 않아 의아할 것이며 개발자가 오류를 찾기 어렵게 만든다.</p>\n<p>이러한 부분에서 문제가 발생할 경우 throw, !!, requireNotNull, checkNotNull등을 활용해 개발자에게 오류를 강제로 발생시켜 주는 것이 좋다.</p>\n<h3 id=\"not-null-assertion과-관련된-문제\" style=\"position:relative;\"><a href=\"#not-null-assertion%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%AC%B8%EC%A0%9C\" aria-label=\"not null assertion과 관련된 문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>not-null assertion(!!)과 관련된 문제</h3>\n<p>!!은 nullable이지만 null이 나오지 않는다는 것이 확실한 상황에 많이 사용된다.\nnot-null assertion(!!)은 사용하기 쉽지만 좋은 해결 방법은 아니다.</p>\n<p>현재 null이 나오지 않는 사실이 확실하다고 미래에 확실한 것은 아니기 때문이다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class ABC {\n    private var controller: UserController? = null\n\n    fun init() {\n        controller = UserController()\n    }\n\n    fun test() {\n        controller!!.doSomething()\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같이 사용하면  <code class=\"language-text\">controller!!.doSomething()</code> 와 같이 프로퍼티를 계속 언팩(unpack)해야 하므로 사용하기 귀찮다.</p>\n<p>이 경우 lateinit 또는 Delegrates.notNull을 활용하는게 좋다.</p>\n<h3 id=\"의미-없는-nullablity-피하기\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EB%AF%B8-%EC%97%86%EB%8A%94-nullablity-%ED%94%BC%ED%95%98%EA%B8%B0\" aria-label=\"의미 없는 nullablity 피하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의미 없는 nullablity 피하기</h3>\n<p>nullability는 어떻게든 처리해야 하므로 추가 비용이 발생한다.</p>\n<p>따라서 필요한 경우가 아니라면 nullability 자체를 피하는게 좋다.</p>\n<ul>\n<li>클래스에서 nullability에 따라 List<T>의 get 혹은 getOrNull과 유사한 여러 함수를 만들어 제공한다.</li>\n<li>클래스 생성 이후 확실히 생성된다는 보장이 있으면 lateinit 프로퍼티 혹은 notNull 델리게이트 활용</li>\n<li>빈 컬렉션 대신 null을 리턴하지 말자, 요소가 부족한 것을 나타낼때는 empty 컬렉션 활용</li>\n<li>nullable enum과 None enum 값은 완전히 다른 의미이다. null인 사용하는 곳에서 별도로 처리하지만, None enum은 정의에 없으므로 필요한 경우 추가해서 활용할 수 있다는 의미</li>\n</ul>\n<h3 id=\"lateinit-프로퍼티와-notnull-델리게이트\" style=\"position:relative;\"><a href=\"#lateinit-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-notnull-%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8\" aria-label=\"lateinit 프로퍼티와 notnull 델리게이트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lateinit 프로퍼티와 notNull 델리게이트</h3>\n<p>클래스 생성 중 초기화 할 수 없는 프로퍼티를 가지는 것은 드문 일은 아니지만 분명 존재하는 일이다.</p>\n<p>이러한 프로퍼티는 사용전 반드시 초기화가 필요하다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class ABC {\n    private var controller: UserController? = null\n\n    fun init() {\n        controller = UserController()\n    }\n\n    fun test() {\n        controller!!.doSomething()\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>매번 !! operator를 활용해 nullable에서 타입 변환해 사용하는 것은 바람직하지 않다.</p>\n<p>이때는 아래처럼 lateinit 혹은 notNull Delegates를 활용하자.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">class ABC {\n    private lateinit var controller: UserController\n\n    fun init() {\n        controller = UserController()\n    }\n\n    fun test() {\n        controller!!.doSomething()\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>lateinit은 nullable과 비교해 아래와 같은 이점이 있다.</p>\n<ul>\n<li>!! operator를 이용한 언팩이 불필요하다.</li>\n<li>이후에 null로 사용하고 싶을 때 nullable로 만들수도 있다.</li>\n<li>프로퍼티가 초기화된 이후에는 초기화되지 않은 상태로 돌아갈 수 없다.</li>\n</ul>\n<p>아래처럼 onCreate때 초기화 해 lateinit을 사용할 수 없는 경우 Delegrates.notNull을 사용한다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">private var doctorId: Int by Delegates.notNull()\n\nfun onCreate() {\n    docterId = // 생략\n}</code>\n        </deckgo-highlight-code>\n<p>다음과 같이 property delegation을 활용할 수도 있다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">private var doctorId: Int by arg(DOCTER_ID_ARG)</code>\n        </deckgo-highlight-code>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&#x26;ejkGb=KOR&#x26;barcode=9788966263370&#x26;orderClick=4bb#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</a></li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-08/#null%EC%9D%84-%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">null을 안전하게 처리하기</a></li>\n<li>\n<p><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-08/#%EC%98%A4%EB%A5%98-throw-%ED%95%98%EA%B8%B0\">오류 throw 하기</a></p>\n<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-08/#not-null-assertion%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%AC%B8%EC%A0%9C\">not-null assertion(!!)과 관련된 문제</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-08/#%EC%9D%98%EB%AF%B8-%EC%97%86%EB%8A%94-nullablity-%ED%94%BC%ED%95%98%EA%B8%B0\">의미 없는 nullablity 피하기</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-08/#lateinit-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EC%99%80-notnull-%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8\">lateinit 프로퍼티와 notNull 델리게이트</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-08/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-08","tagSlugs":null},"frontmatter":{"date":"2022-02-08T02:10:00.000Z","description":"Effective Kotlin Item 08. 적절하게 null을 처리하라","tags":null,"title":"이펙티브 코틀린 아이템 08. 적절하게 null을 처리하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-08"}},"staticQueryHashes":["2067870509","251939775","401334301"]}