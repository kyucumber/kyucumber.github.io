{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-07","result":{"data":{"markdownRemark":{"id":"b1c1713c-1ca0-5bb0-bd36-46b5946fa641","html":"<p>아래와 같이 함수가 원하는 결과를 만들어 낼 수 없을 때가 존재한다.</p>\n<ul>\n<li>서버로부터 데이터를 읽어 들이려고 했는데, 인터넷 연결 문제로 읽어들이지 못한 경우</li>\n<li>조건에 맞는 첫 번째 요소를 찾으려 했는데, 조건에 맞는 요소가 없는 경우</li>\n<li>텍스트를 파싱해서 객체를 만들려고 했는데, 텍스트의 형식이 맞지 않는 경우</li>\n</ul>\n<p>위와 같은 상황을 처리하는 메커니즘은 크게 두가지가 있다.</p>\n<ul>\n<li>null 또는 실패를 나타내는 sealed 클래스(일반적으로 Failure라는 이름 사용)</li>\n<li>예외 throw</li>\n</ul>\n<p>예외를 throw 하는 경우 예외를 정보를 전달하는 방법으로 사용하면 안된다.\n예외는 <strong>예외적인 상황이 발생했을 때 사용하는 것</strong>이 좋다. 이유는 아래와 같다.</p>\n<ul>\n<li>많은 개발자가 예외가 전파되는 과정을 제대로 추적하지 못한다.</li>\n<li>코틀린의 모든 예외는 unchecked 예외이며 따라서 사용자가 예외를 처리하지 않을수도 있다. 이와 관련된 내용은 문서에도 제대로 제대로 드러나지 않는다.</li>\n<li>예외는 예외적인 상황을 처리하기 위해 만들어졌으므로 명시적인 테스트 만큼 빠르게 동작하지 않는다.</li>\n<li>try-catch 블록 내부에 코드를 배치하면, 컴파일러가 할 수 있는 <strong>최적화가 제한</strong>된다.</li>\n</ul>\n<h2 id=\"null-또는-sealed-클래스를-활용한-오류-처리\" style=\"position:relative;\"><a href=\"#null-%EB%98%90%EB%8A%94-sealed-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\" aria-label=\"null 또는 sealed 클래스를 활용한 오류 처리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null 또는 sealed 클래스를 활용한 오류 처리</h2>\n<p>위에서 다룬 첫번째 방법인 null 또는 실패를 나타내는 sealed 클래스를 사용하는 방법은 오류를 표현할 때 굉장히 좋다.</p>\n<blockquote>\n<p>예측할 수 있는 범위의 오류는 null과 Failure를 사용하고 예측하기 어려운 범위의 오류는 예외를 throw 해서 처리하자.</p>\n</blockquote>\n<p><strong>AS-IS</strong></p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">inline fun &lt;reified T&gt;.readObjectOrNull(): T? {\n    // ...\n    if (incorrectSign) {\n        return null\n    }\n    // ..\n    return result\n}</code>\n        </deckgo-highlight-code>\n<p><strong>TO-BE</strong></p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">inline fun &lt;reified T&gt;.readObjectOrNull(): T? {\n    // ...\n    if (incorrectSign) {\n        return Failure(JsonParsingException()\n    }\n    // ..\n    return Success(result)\n}\n\nsealed class Result&lt;out T&gt;\nclass Success&lt;out T&gt;(val result: T): Result&lt;T&gt;()\nclass Failure(val throwable: Throwable): Result&lt;Nothing&gt;()\n\nclass JsonParsingException: Exception</code>\n        </deckgo-highlight-code>\n<p>위와 같이 표시되는 오류는 다루기 쉬우며 놓치기 어렵다.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">val age = userText.readObjectOrNull&lt;Person&gt;()?.age ?: -1</code>\n        </deckgo-highlight-code>\n<p>null을 처리해야 하면 위의 safe call(?) 또는 elvis operator(?:)와 같은 다양한 null-safety 기능을 활용하자.</p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"one-light\" >\n          <code slot=\"code\">val person = userText.readObjectOrNull&lt;Person&gt;()\nval age = when(person) {\n    is Success -&gt; person.age\n    is Failure -&gt; -1\n}</code>\n        </deckgo-highlight-code>\n<p>Result와 같은 Union type을 리턴하기로 했다면 위의 when 표현식을 사용해 이를 처리할 수 있다.</p>\n<p>위에서 설명한 오류 처리 방식은 try-catch 블록보다 효율적이며, 사용하기 쉽고 명확하다.\n예외는 놓칠 수 있고, 전체 애플리케이션을 중지시킬 수 있지만 null 값과 seald result 클래스는 명시적으로 처리해야 하며 애플리케이션을 중지시키지도 않는다.</p>\n<blockquote>\n<p>null과 sealed class 차이점\n추가적인 정보 전달이 필요하면 sealed result를 사용하고, 그렇지 않으면 null을 사용하는게 일반적이다.\nFailure는 처리할 때 필요한 정보를 가질 수 있다.</p>\n</blockquote>\n<p>List에서는 아래와 같은 형태의 함수를 사용한다.</p>\n<ul>\n<li>\n<p>get</p>\n<p>해당 요소가 없다면 IndexOutOfBoundsException(List 기준)</p>\n</li>\n<li>\n<p>getOrNull</p>\n<p>해당 요소가 없다면 null</p>\n</li>\n</ul>\n<p>위 두가지 함수 이외에 일부 유용한 getOrDefault도 존재.</p>\n<p>일반적으로 getOrNull 또는 Elvis operator(?:)를 사용하는 것이 처리하기 쉽다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>예측하기 어려운 범위가 아닌 경우라면 null 또는 sealed 클래스를 활용하자</li>\n<li>개발자에게 null이 발생할 수 있다고 경고를 주려면 getOrNull 등을 사용해 무엇이 리턴되는지 예측할 수 있게 하는 것이 좋다.</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-07/#null-%EB%98%90%EB%8A%94-sealed-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC\">null 또는 sealed 클래스를 활용한 오류 처리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-07/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-07/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-07","tagSlugs":null},"frontmatter":{"date":"2022-02-08T01:50:00.000Z","description":"Effective Kotlin Item 07. 결과 부족이 발생할 경우 null과 Failure를 사용하라","tags":null,"title":"이펙티브 코틀린 아이템 07. 결과 부족이 발생할 경우 null과 Failure를 사용하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-07"}},"staticQueryHashes":["2067870509","251939775","401334301"]}