{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/book/effective-kotlin/effective-kotlin-item-01","result":{"data":{"markdownRemark":{"id":"8556f362-39d5-53d0-9355-f725117e58af","html":"<h2 id=\"코틀린에서-가변성-제한하기\" style=\"position:relative;\"><a href=\"#%EC%BD%94%ED%8B%80%EB%A6%B0%EC%97%90%EC%84%9C-%EA%B0%80%EB%B3%80%EC%84%B1-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0\" aria-label=\"코틀린에서 가변성 제한하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코틀린에서 가변성 제한하기</h2>\n<p>코틀린에서 가변성을 제한하기 위해 굉장히 많은 방법을 활용할 수 있지만\n많이 사용되고 중요한 방법은 아래와 같다.</p>\n<ul>\n<li>읽기 전용 프로퍼티(val)</li>\n<li>가변 컬렉션과 읽기 전용 컬렉션 구분</li>\n<li>데이터 클래스의 copy</li>\n</ul>\n<h3 id=\"읽기-전용-프로퍼티val\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0val\" aria-label=\"읽기 전용 프로퍼티val permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기 전용 프로퍼티(val)</h3>\n<p>코틀린에서는 val 키워드로 읽기 전용 프로퍼티를 만들 수 있다.</p>\n<ul>\n<li>읽기 전용 프로퍼티로 정의해도 Mutable한 데이터를 담고 있다면 내부적으로 변경이 가능하다</li>\n</ul>\n<h3 id=\"가변-컬렉션과-읽기-전용-컬렉션-구분하기\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EC%BB%AC%EB%A0%89%EC%85%98%EA%B3%BC-%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9-%EC%BB%AC%EB%A0%89%EC%85%98-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\" aria-label=\"가변 컬렉션과 읽기 전용 컬렉션 구분하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 컬렉션과 읽기 전용 컬렉션 구분하기</h3>\n<p>아래와 같은 컬렉션 다운 캐스팅 금지</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val list = listOf(1,2,3)\n\nif (list is MutableList) {\n    list.add(4)\n}</code>\n        </deckgo-highlight-code>\n<p>JVM 기준 Arrays.ArrayList에는 add가 구현되어 있지 않아 UnsupportedOperationException이 발생한다.</p>\n<p>읽기 전용에서 가변으로 변경하려면 아래와 같은 toMutableList를 활용한다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val list = listOf(1,2,3)\n\nval mutable = list.toMutableList()</code>\n        </deckgo-highlight-code>\n<h3 id=\"데이터-클래스의-copy\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-copy\" aria-label=\"데이터 클래스의 copy permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 클래스의 copy</h3>\n<p>Immutable 객체를 사용하면 아래와 같은 장점이 있다.</p>\n<ul>\n<li>한번 정의된 상태가 유지되므로 코드를 이해하기 쉽다.</li>\n<li>Immutable 객체는 공유시에도 충돌이 발생하지 않아 병렬 처리를 안전하게 할 수 있다.</li>\n<li>Immutable 객체에 대한 참조는 변경되지 않으므로, 쉽게 캐시할 수 있다.</li>\n<li>Immutable 객체의 방어적 복사본을 만들 필요가 없다. 또한 깊은 복사를 따로 할 필요가 없다.</li>\n<li>Immutable 객체는 다른 객체를 만들때 활용하기 좋으며 실행을 더 쉽게 예측할 수 있다.</li>\n<li>Imuutable 객체는 Set 혹은 Map의 키로 활용할 수 있다. (Mutable은 요소에 수정이 일어나면 해시 테이블 내부에서 요소를 찾을 수 없어 활용할 수 없음)</li>\n</ul>\n<p>Int와 같이 내부적으로 plus, minus와 같이 불변한 Int를 리턴하는 메소드를 만들어 불변을 유지할 수 있다.</p>\n<blockquote>\n<p>매번 모든 프로퍼티 대상으로 plus, minus와 같은 함수를 만드는 것은 번거로우니 data class 및 copy 메소드를 활용하자</p>\n</blockquote>\n<h2 id=\"다른-종류의-변경-가능-지점mutating-point\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%EC%A2%85%EB%A5%98%EC%9D%98-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5-%EC%A7%80%EC%A0%90mutating-point\" aria-label=\"다른 종류의 변경 가능 지점mutating point permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 종류의 변경 가능 지점(mutating point)</h2>\n<p>변경 가능한 리스트를 만들 때 아래와 같은 두가지 선택지가 존재한다.</p>\n<ul>\n<li>val + MutableList</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">val list1: MutableList&lt;Int&gt; = mutableListOf()</code>\n        </deckgo-highlight-code>\n<ul>\n<li>var + ImmutableList</li>\n</ul>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">var list2: List&lt;Int&gt; = listOf()</code>\n        </deckgo-highlight-code>\n<p>두 가지 모두 변경은 가능하지만 내부적인 동작이 다르다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">list1 += 1 // list1.plusAssign(1)\nlist2 += 1 // list2.plus(1)</code>\n        </deckgo-highlight-code>\n<p>첫번째 코드는 멀티스레드 처리 시 내부의 동기화 여부를 알 수 없어 위험하며 두번째 코드가 멀티스레드 안정성이 더 좋다. (하지만 잘못 만들면 일부 요소의 손실 가능)</p>\n<p>mutable 프로퍼티를 사용하면 사용자 정의 setter(또는 이를 사용하는 델리게이트)를 활용해 변경을 추적할 수 있음</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">var names by Delegates.observable(listOf&lt;String&gt;()) { _, old, new -&gt; \n    println(&quot;Names chanaged from $old to $new&quot;)\n}</code>\n        </deckgo-highlight-code>\n<p>MutableCollection 대신 mutable 프로퍼티인 var를 활용하는게 객체 변경을 더 제어하기가 쉽다.</p>\n<blockquote>\n<p>최악의 방법은 프로퍼티와 컬렉션 모두 Mutable로 만드는 것</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">var list = mutableListOf&lt;Int&gt;()\n\nlist += 1 // 모호성이 발생해 해당 연산자 사용 불가능</code>\n        </deckgo-highlight-code>\n</blockquote>\n<h2 id=\"변경-가능-지점-노출하지-말기\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5-%EC%A7%80%EC%A0%90-%EB%85%B8%EC%B6%9C%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\" aria-label=\"변경 가능 지점 노출하지 말기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경 가능 지점 노출하지 말기</h2>\n<p>Mutable 객체가 외부에 노출되는 경우 수정이 발생할 수 있으니 위험하다.</p>\n<p>리턴되는 mutable 객체 복제해 반환하는 <strong>방어적 복제(defensive copying)</strong> 사용</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">class UserHolder {\n   private val user: MutableUser()\n\n   fun get(): MutableUser {\n       return user.copy()\n   }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>var 보다는 val 사용</li>\n<li>mutable 프로퍼티보다는 immutable 프로퍼티 사용</li>\n<li>mutable 객체와 클래스 보다는 immutable 객체와 클래스 사용</li>\n<li>변경이 필요한 대상이 있다면 immutable data class로 만들고 copy 활용</li>\n<li>컬렉션에 상태를 저장해야 한다면, mutable 보다는 immutable 컬렉션 사용</li>\n<li>변이 지점을 적절하게 설게하고 불필요한 변이 지점을 만들지 않는게 좋다.</li>\n<li>mutable 객체의 외부 노출은 피하자.</li>\n<li>효율성 때문에 immutable 보다 mutable을 다루는게 좋은 경우도 있다.</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>이펙티브 코틀린 - 프로그래밍 인사이트, 마르친 모스칼라 지음, 윤인성 옮김</li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EC%BD%94%ED%8B%80%EB%A6%B0%EC%97%90%EC%84%9C-%EA%B0%80%EB%B3%80%EC%84%B1-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B8%B0\">코틀린에서 가변성 제한하기</a></p>\n<ul>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0val\">읽기 전용 프로퍼티(val)</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EA%B0%80%EB%B3%80-%EC%BB%AC%EB%A0%89%EC%85%98%EA%B3%BC-%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9-%EC%BB%AC%EB%A0%89%EC%85%98-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0\">가변 컬렉션과 읽기 전용 컬렉션 구분하기</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-copy\">데이터 클래스의 copy</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EB%8B%A4%EB%A5%B8-%EC%A2%85%EB%A5%98%EC%9D%98-%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5-%EC%A7%80%EC%A0%90mutating-point\">다른 종류의 변경 가능 지점(mutating point)</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EB%B3%80%EA%B2%BD-%EA%B0%80%EB%8A%A5-%EC%A7%80%EC%A0%90-%EB%85%B8%EC%B6%9C%ED%95%98%EC%A7%80-%EB%A7%90%EA%B8%B0\">변경 가능 지점 노출하지 말기</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n<li><a href=\"/posts/book/effective-kotlin/effective-kotlin-item-01/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-01","tagSlugs":["/tag/kotlin/"]},"frontmatter":{"date":"2022-02-08T00:00:00.000Z","description":"Effective Kotlin Item 01. 가변성을 제한하라","tags":["Kotlin"],"title":"이펙티브 코틀린 아이템 01. 가변성을 제한하라","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/book/effective-kotlin/effective-kotlin-item-01"}},"staticQueryHashes":["2067870509","251939775","401334301"]}