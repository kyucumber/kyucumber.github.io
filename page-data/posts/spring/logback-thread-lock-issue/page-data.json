{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/spring/logback-thread-lock-issue","result":{"data":{"markdownRemark":{"id":"fcd1c6fc-5a05-5c1a-b663-925a3bf6210c","html":"<p>운영중인 개발 환경 서버에서 504 Gateway Time-out이 발생하고 일정 시간이 지나도 회복되지 않는 문제가 발생했다.</p>\n<p>해당 어플리케이션의 경우 지속적으로 헬스체크를 진행하고 실패시 트래픽을 받지 않도록 구성해두었는데도 문제가 있는 장비는 제거되지 않고 계속 트래픽을 받고 있었다.</p>\n<p>트래픽을 받는 특정 장비 내부에서 curl을 이용해 헬스체크 path에 대해 요청을 보내보았으나 아래와 같이 정상적으로 200 응답이 내려오는 것을 확인할 수 있었다.</p>\n<deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">❯ curl http://localhost/actuator/health\n{&quot;status&quot;:&quot;UP&quot;,&quot;components&quot;:{&quot;ping&quot;:{&quot;status&quot;:&quot;UP&quot;}}}</code>\n        </deckgo-highlight-code>\n<p>명확한 원인 파악을 위해 아래와 같이 스레드 덤프를 따서 확인해보았다.</p>\n<deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">java.lang.Thread.State: RUNNABLE\nat java.io.FileOutputStream.writeBytes(Native Method)\nat java.io.FileOutputStream.write(FileOutputStream.java:326)\nat java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)\n- locked &lt;0x00000000c023a8e0&gt; (a java.io.BufferedOutputStream)\nat java.io.PrintStream.write(PrintStream.java:480)\n- locked &lt;0x00000000c023a8c0&gt; (a java.io.PrintStream)\nat java.io.FilterOutputStream.write(FilterOutputStream.java:97)\nat ch.qos.logback.core.joran.spi.ConsoleTarget$1.write(ConsoleTarget.java:37)\nat ch.qos.logback.core.OutputStreamAppender.writeBytes(OutputStreamAppender.java:199)\nat ch.qos.logback.core.OutputStreamAppender.subAppend(OutputStreamAppender.java:231)\nat ch.qos.logback.core.OutputStreamAppender.append(OutputStreamAppender.java:102)\nat ch.qos.logback.core.UnsynchronizedAppenderBase.doAppend(UnsynchronizedAppenderBase.java:84)\nat ch.qos.logback.core.spi.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:51)\nat ch.qos.logback.classic.Logger.appendLoopOnAppenders(Logger.java:270)\nat ch.qos.logback.classic.Logger.callAppenders(Logger.java:257)\nat ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:421)\nat ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:398)\nat ch.qos.logback.classic.Logger.info(Logger.java:583)\nat 문제가 발생한 패키지(문제가 발생한 클래스.kt:107)</code>\n        </deckgo-highlight-code>\n<p>해당 스레드 덤프의 내용을 보면 특정 스레드 하나가 RUNNABLE 상태임에도 불구하고 <code class=\"language-text\">java.io.PrintStream.write</code>에서 locked로 lock이 발생한 것을 확인할 수 있었다.</p>\n<h2 id=\"원인\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%9D%B8\" aria-label=\"원인 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원인</h2>\n<p>대부분의 로그는 파일로 별도로 떨구게 구성해두었는데, 개발 환경이다보니 어플리케이션 내부에 아래와 같이 stdout 로그를 찍는 부분이 logback 설정에 포함되어 있었고 이 부분에서 문제가 발생한 것으로 보인다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n    &lt;encoder&gt;\n        &lt;charset&gt;utf8&lt;/charset&gt;\n        &lt;pattern&gt;%d{MM-dd HH:mm:ss} [%thread] %.-5level %logger{36} - %msg%n&lt;/pattern&gt;\n    &lt;/encoder&gt;\n&lt;/appender&gt;</code>\n        </deckgo-highlight-code>\n<p>stdout으로 로그를 출력하더라도 기존에 잘 동작하고 특별한 설정의 변경이 없던 어플리케이션에서 갑자기 왜 위와 같은 문제가 발생한 것인지는 명확히 파악하지 못했다.</p>\n<p>트래픽이나 로깅의 양이 늘어나지도 않았고, 설정도 변경되지 않았으며 Volume 설정 또한 변경한 부분이 없는 상태에서 갑자기 모든 장비에 lock이 잡히게 되었는지는 의문이다.</p>\n<p>일단 근본적인 원인은 lock을 무기한으로 보유하고 있는 RUNNABLE 스레드로 보이며 아래와 같이 유사한 현상을 겪은 케이스를 logback 이슈에서 찾을 수 있었다.</p>\n<p><a href=\"https://jira.qos.ch/browse/LOGBACK-1406?attachmentViewMode=list\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jira.qos.ch/browse/LOGBACK-1406?attachmentViewMode=list</a></p>\n<p><a href=\"https://jira.qos.ch/browse/LOGBACK-1422?attachmentViewMode=list\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jira.qos.ch/browse/LOGBACK-1422?attachmentViewMode=list</a></p>\n<h2 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h2>\n<p>근본적인 원인은 확인하지 못했으나, stdout으로 로그를 찍는 부분이 어플리케이션에 영향을 주지 않도록 아래 부분을 변경했다.</p>\n<ul>\n<li>ConsoleAppender → AsyncAppender로 변경</li>\n<li>neverBlock 설정 추가</li>\n</ul>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">&lt;appender name=&quot;STDOUT-ASYNC&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;\n    &lt;neverBlock&gt;true&lt;/neverBlock&gt;\n    &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;\n&lt;/appender&gt;</code>\n        </deckgo-highlight-code>\n<p>AsyncAppender만 사용해도 문제가 없을 것으로 생각했는데 AsyncAppender만을 적용해도 스레드가 무기한으로 lock을 보유하는 문제는 동일하게 발생했다.</p>\n<p>설정을 조금 잘못 넣어서 그런것일지도 모르겠으나, neverBlock 설정을 추가한 시점부터 의도한 대로 lock이 걸려도 어플리케이션이 멈추지 않고 정상적으로 동작했다.</p>\n<blockquote>\n<p>다만 lock이 걸린 시점부터는 stdout 로그가 정상적으로 출력되지 않는다.</p>\n</blockquote>","tableOfContents":"<ul>\n<li><a href=\"/posts/spring/logback-thread-lock-issue/#%EC%9B%90%EC%9D%B8\">원인</a></li>\n<li><a href=\"/posts/spring/logback-thread-lock-issue/#%ED%95%B4%EA%B2%B0\">해결</a></li>\n</ul>","fields":{"slug":"/posts/spring/logback-thread-lock-issue","tagSlugs":["/tag/logback/","/tag/thread/","/tag/lock/"]},"frontmatter":{"date":"2021-05-01T00:00:00.000Z","description":"stdout 로그 출력 시 특정 Thread가 lock을 무기한 보유하는 이슈에 대해 설명합니다.","tags":["Logback","Thread","Lock"],"title":"logback에서 stdout 로그 출력 시 특정 Thread가 lock을 무기한 보유하는 이슈","socialImage":{"publicURL":"/static/69c1ea5ccd3b858a08b583ced6c5ccf0/gatsby.png"}}}},"pageContext":{"slug":"/posts/spring/logback-thread-lock-issue"}},"staticQueryHashes":["2067870509","251939775","401334301"]}