{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/spring/spring-data-redis-atomic-operations/","result":{"data":{"markdownRemark":{"id":"ebbd9aef-5f40-5891-80bf-682c1c983500","html":"<p>팀 내에서 서비스 운영을 위해 Redis Clutser를 사용하고 있으며\n내부 코드에 아래와 같이 PartialUpdate를 사용해 구현된 부분이 존재합니다.</p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">redisKVTemplate.update(\n    PartialUpdate(id, Data::class.java)\n        .set(&quot;timeout&quot;, timeout)\n        .set(&quot;accessedAt&quot;, accessedAt)\n)</code>\n        </deckgo-highlight-code>\n<p>내부적으로 Data의 만료 여부를 체크하고 만료된 데이터를 삭제하는 로직이 존재하는데\n멀티 인스턴스에서 여러 operation이 들어오다 보니 <strong>삭제된 이후에 Data에 대한 PartialUpdate가 수행</strong>되는 경우가 빈번하게 발생했습니다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"one-light\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">org.springframework.data.mapping.model.MappingInstantiationException: Failed to instantiate data.Data using constructor fun &lt;init&gt;(kotlin.String, kotlin.String, kotlin.String, kotlin.String, kotlin.String, java.time.Instant, java.time.Instant, kotlin.Long):</code>\n        </deckgo-highlight-code>\n<p>삭제된 이후 PartialUpdate를 수행하면 timeout, accessedAt 값 이외의 값들이 존재하지 않게 되며\n해당 값들은 Kotlin에서 non null 타입으로 정의되어 있어 위와 같은 예외가 발생하게 됩니다.</p>\n<p>서비스에 큰 이슈는 없는 상황이라 방치하고 있었지만 atomic operation을 보장해 위와 같은 케이스가 발생하지 않도록 수정이 필요했습니다.</p>\n<h2 id=\"redis와-transaction\" style=\"position:relative;\"><a href=\"#redis%EC%99%80-transaction\" aria-label=\"redis와 transaction permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redis와 Transaction</h2>\n<p>Cluster 모드가 아닌 경우라면 MULTI, EXEC, DISCARD, WATCH 등의 키워드를 이용해 spring-data-redis 내에서 트랜잭션을 보장할 수 있습니다.</p>\n<p>하지만 <a href=\"https://stackoverflow.com/questions/43124168/is-transaction-multi-exec-supported-in-spring-data-redis-in-a-cluster-mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">클러스터 모드를 사용하는 경우 spring-data-redis 내부에서는 트랜잭션 보장을 지원하지 않습니다</a>.</p>\n<p>따라서 spring-data-redis의 트랜잭션 서포트를 기대할 수 없는 상황이며 atomic operation 보장을 위해서 다른 방법을 사용해야 합니다.</p>\n<p>Redis는 서버 내부의 Lua 인터프리터를 이용해 Lua script로 작성된 코드를 해석하고 실행할 수 있습니다.\nLua script를 활용해 여러 명령어를 조합할 수 있으며, 스크립트 자체가 하나의 명령어와 같이 동작하기 때문에 atomic operation을 보장할 수 있습니다.</p>\n<blockquote>\n<p>Lua script를 사용하더라도 여러 샤드에 있는 키를 조작하거나 하는 행동은 불가능하므로 스크립트에 관련된 키가 단일 샤드에서 실행되도록 보장해야 합니다.</p>\n</blockquote>\n<h2 id=\"spring-data-redis와-lua-script\" style=\"position:relative;\"><a href=\"#spring-data-redis%EC%99%80-lua-script\" aria-label=\"spring data redis와 lua script permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spring data redis와 Lua script</h2>\n<p>spring-data-redis에서는 <a href=\"https://github.com/spring-projects/spring-data-redis/blob/main/src/main/asciidoc/reference/redis-scripting.adoc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lua script의 사용을 지원</a>합니다.</p>\n<p>atomic을 보장하고 싶은 operation의 내용은 아래와 같습니다.</p>\n<ul>\n<li>Hash의 특정 field가 존재하는 경우에만 PartialUpdate를 수행한다.</li>\n<li>Hash의 특정 field가 존재하지 않는 경우 해당 키의 데이터를 제거한다.</li>\n</ul>\n<p>해당 operation의 수행을 위해\n아래와 같은 Lua script 작성 및 설정을 통해 atomic operation을 보장할 수 있습니다.</p>\n<p><code class=\"language-text\">resources/scripts/update_data_if_exist.lua</code></p>\n<deckgo-highlight-code language=\"lua\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">-- update_data_if_exist.lua\nif redis.call(&#39;HEXISTS&#39;, KEYS[1], &#39;username&#39;)==1 then\n  redis.call(&#39;HSET&#39;, KEYS[1], &#39;timeout&#39;, ARGV[1])\n  redis.call(&#39;HSET&#39;, KEYS[1], &#39;accessedAt&#39;, ARGV[2])\nelse\n  redis.call(&#39;DEL&#39;, KEYS[1])\nend</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">RedisLuaScriptConfig</code></p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">@Configuration\nclass RedisLuaScriptConfig {\n    @Bean\n    fun updateIfExistScript(): RedisScript&lt;Unit&gt; =\n        RedisScript.of(ResourceScriptSource(ClassPathResource(&quot;scripts/update_data_if_exist.lua&quot;)).scriptAsString)\n}</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">DataRepository</code></p>\n<deckgo-highlight-code language=\"kotlin\" terminal=\"carbon\" theme=\"one-light\"  >\n          <code slot=\"code\">interface DataRepository : CrudRepository&lt;Data, String&gt;, DataCustomRepository\n\ninterface DataCustomRepository {\n    fun updateTimeoutAndAccessedAt(data: Data, accessedAt: Instant = Instant.now())\n}\n\n@Repository\nclass DataCustomRepositoryImpl(\n    private val updateIfExistScript: RedisScript&lt;Unit&gt;,\n    private val stringRedisTemplate: RedisTemplate&lt;String, String&gt;\n) : DataCustomRepository {\n    override fun updateTimeoutAndAccessedAt(data: Data, accessedAt: Instant) {\n        stringRedisTemplate.execute(\n            updateIfExistScript,\n            listOf(&quot;data:${session.id}&quot;),\n            data.timeout.toString(),\n            accessedAt.toString()\n        )\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/spring-projects/spring-data-redis/blob/main/src/main/asciidoc/reference/redis-scripting.adoc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Data - Redis Redis Scripting</a></li>\n<li><a href=\"https://engineering.linecorp.com/ko/blog/atomic-cache-stampede-redis-lua-script/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atomic 처리와 cache stampede 대책을 위해 Redis Lua script를 활용한 이야기</a></li>\n</ul>\n<p>개인적인 기록을 위해 작성된 글이라 잘못된 내용이 있을 수 있습니다.</p>\n<p>오류가 있다면 댓글을 남겨주세요.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/spring/spring-data-redis-atomic-operations/#redis%EC%99%80-transaction\">Redis와 Transaction</a></li>\n<li><a href=\"/posts/spring/spring-data-redis-atomic-operations/#spring-data-redis%EC%99%80-lua-script\">spring data redis와 Lua script</a></li>\n<li><a href=\"/posts/spring/spring-data-redis-atomic-operations/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/posts/spring/spring-data-redis-atomic-operations/","tagSlugs":["/tag/spring/","/tag/redis-cluster/","/tag/spring-data-redis/"]},"frontmatter":{"date":"2021-12-10T00:00:00.000Z","description":"spring data redis에서 atomic operation 보장을 위해 Lua script를 사용하는 법을 정리합니다","tags":["Spring","Redis Cluster","spring-data-redis"],"title":"spring data redis에서 atomic operation 보장을 위해 Lua script 활용하기","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/spring/spring-data-redis-atomic-operations/"}},"staticQueryHashes":["2067870509","251939775","401334301"]}