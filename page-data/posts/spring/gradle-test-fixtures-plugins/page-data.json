{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/spring/gradle-test-fixtures-plugins","result":{"data":{"markdownRemark":{"id":"3e7623f1-6edb-57d4-a873-27ce43a1c86b","html":"<p>아래와 같은 멀티모듈 구조를 가진 프로젝트에서 <code class=\"language-text\">module-library</code>에 포함된 <code class=\"language-text\">User</code>라는 클래스와 연관된 테스트를 각각의 모듈에서 작성한다고 할 때 어떤 문제점이 있을까요?</p>\n<deckgo-highlight-code language=\"yaml\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">├── module-one\n│   └── module-library\n│   └── test\n│       └──  OneUserTest\n├── module-two\n│   └── module-library\n│   └── test\n│       └──  TwoUserTest\n├── module-three\n│   └── module-library\n│   └── test\n│       └──  ThreeUserTest\n└── module-library\n    └── src\n        └── User</code>\n        </deckgo-highlight-code>\n<p>실제 코드를 작성할 때는 별 다른 문제가 없지만 테스트를 작성할 때 <code class=\"language-text\">module-library</code>에서 가지고 있는 <code class=\"language-text\">User</code>에 대한 Test Fixture를 중복적으로 각 모듈별로 만들어주어야 하는 별거 아니지만 귀찮은 문제가 있습니다.</p>\n<p>각 모듈 <code class=\"language-text\">module-one</code>, <code class=\"language-text\">module-two</code>, <code class=\"language-text\">module-three</code> 테스트 패키지 하위에 필요한 Fixture를 만들어서 사용할 수 있기에 불편함을 감수하고 사용하고 있었는데\nGradle의 <code class=\"language-text\">java-test-fixtures</code> plugin을 통해 모듈 별 Test Fixture 중복을 제거할 수 있었습니다.</p>\n<h2 id=\"gradle-java-test-fixtures-플러그인-적용하기\" style=\"position:relative;\"><a href=\"#gradle-java-test-fixtures-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"gradle java test fixtures 플러그인 적용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gradle java-test-fixtures 플러그인 적용하기</h2>\n<p><code class=\"language-text\">module-library/build.gradle.kts</code></p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">plugins {\n    `java-test-fixtures`\n}</code>\n        </deckgo-highlight-code>\n<p>플러그인 추가 후 여러 모듈에서 사용할 <code class=\"language-text\">module-library/src/testFixtures</code> 디렉토리를 생성하고 하위에 아래와 같이 Fixture 생성을 위한 클래스를 생성합니다.</p>\n<p><code class=\"language-text\">module-library/src/testFixtures/kotlin/com.example/Fixtures.kt</code></p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">object Fixtures {\n    fun user(cn: String): User =\n        User(\n            name = &quot;김규남&quot;,\n            orga = &quot;무슨 조직&quot;,\n        )\n}</code>\n        </deckgo-highlight-code>\n<h2 id=\"testfixtures-사용하기\" style=\"position:relative;\"><a href=\"#testfixtures-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"testfixtures 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>testFixtures 사용하기</h2>\n<p><code class=\"language-text\">module-library</code>에 정의된 <code class=\"language-text\">testFixtures</code>를 사용하기 위해서는 Fixture의 적용이 필요한 모듈에 아래와 같이 의존성을 추가해야 합니다.</p>\n<p><code class=\"language-text\">module-one/build.gradle.kts</code></p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">dependencies {\n    implementation(project(&quot;:module-library&quot;))\n    testImplementation(testFixtures(project(&quot;:module-library&quot;))) // 추가\n}</code>\n        </deckgo-highlight-code>\n<p>위와 같이 의존성을 추가하고 나면 OneUserTest에서 해당 Fixtures.user 메소드를 호출할 수 있습니다.</p>\n<p><code class=\"language-text\">module-one/src/test/kotlin/com.example/OneUserTest.kt</code></p>\n<deckgo-highlight-code language=\"kotlin\"  terminal=\"carbon\" theme=\"dracula\" >\n          <code slot=\"code\">class OneUserTest {\n    @Test\n    fun `test`() {\n        val user = Fixtures.user()\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>다른 모듈 <code class=\"language-text\">module-two</code>, <code class=\"language-text\">module-three</code>도 동일하게 사용할 수 있습니다.</p>\n<p>이제는 각각의 모듈에서 Test Fixture를 위해 중복 코드를 정의하지 않고 <code class=\"language-text\">module-library/testFixtures</code> 하위에만 Fixture 정의를 위한 코드를 추가해 사용할 수 있습니다. </p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<p><a href=\"https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gradle Java Test Fixtures</a></p>","tableOfContents":"<ul>\n<li><a href=\"/posts/spring/gradle-test-fixtures-plugins/#gradle-java-test-fixtures-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">Gradle java-test-fixtures 플러그인 적용하기</a></li>\n<li>\n<p><a href=\"/posts/spring/gradle-test-fixtures-plugins/#testfixtures-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">testFixtures 사용하기</a></p>\n<ul>\n<li><a href=\"/posts/spring/gradle-test-fixtures-plugins/#reference\">Reference</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/spring/gradle-test-fixtures-plugins","tagSlugs":["/tag/gradle/","/tag/plugins/","/tag/spring/"]},"frontmatter":{"date":"2021-03-01T00:00:00.000Z","description":"Gradle에서 test-fixtures 플러그인을 통해 테스트에서 발생하는 중복 코드를 제거하는 방법 정리","tags":["Gradle","Plugins","Spring"],"title":"Gradle test fixtures 플러그인을 통해 중복 코드 줄이기","socialImage":{"publicURL":"/static/3fb2d4de4502fbae8b21ee45fe945cf4/kyucumber.jpg"}}}},"pageContext":{"slug":"/posts/spring/gradle-test-fixtures-plugins"}},"staticQueryHashes":["2067870509","251939775","401334301"]}